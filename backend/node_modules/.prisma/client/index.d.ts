
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model customers
 * 
 */
export type customers = $Result.DefaultSelection<Prisma.$customersPayload>
/**
 * Model deliverers
 * 
 */
export type deliverers = $Result.DefaultSelection<Prisma.$deliverersPayload>
/**
 * Model kitchens
 * 
 */
export type kitchens = $Result.DefaultSelection<Prisma.$kitchensPayload>
/**
 * Model menu
 * 
 */
export type menu = $Result.DefaultSelection<Prisma.$menuPayload>
/**
 * Model orders
 * 
 */
export type orders = $Result.DefaultSelection<Prisma.$ordersPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Customers
 * const customers = await prisma.customers.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Customers
   * const customers = await prisma.customers.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.customers`: Exposes CRUD operations for the **customers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customers.findMany()
    * ```
    */
  get customers(): Prisma.customersDelegate<ExtArgs>;

  /**
   * `prisma.deliverers`: Exposes CRUD operations for the **deliverers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Deliverers
    * const deliverers = await prisma.deliverers.findMany()
    * ```
    */
  get deliverers(): Prisma.deliverersDelegate<ExtArgs>;

  /**
   * `prisma.kitchens`: Exposes CRUD operations for the **kitchens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Kitchens
    * const kitchens = await prisma.kitchens.findMany()
    * ```
    */
  get kitchens(): Prisma.kitchensDelegate<ExtArgs>;

  /**
   * `prisma.menu`: Exposes CRUD operations for the **menu** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Menus
    * const menus = await prisma.menu.findMany()
    * ```
    */
  get menu(): Prisma.menuDelegate<ExtArgs>;

  /**
   * `prisma.orders`: Exposes CRUD operations for the **orders** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Orders
    * const orders = await prisma.orders.findMany()
    * ```
    */
  get orders(): Prisma.ordersDelegate<ExtArgs>;

  /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    customers: 'customers',
    deliverers: 'deliverers',
    kitchens: 'kitchens',
    menu: 'menu',
    orders: 'orders',
    users: 'users'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "customers" | "deliverers" | "kitchens" | "menu" | "orders" | "users"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      customers: {
        payload: Prisma.$customersPayload<ExtArgs>
        fields: Prisma.customersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.customersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.customersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload>
          }
          findFirst: {
            args: Prisma.customersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.customersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload>
          }
          findMany: {
            args: Prisma.customersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload>[]
          }
          create: {
            args: Prisma.customersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload>
          }
          createMany: {
            args: Prisma.customersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.customersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload>
          }
          update: {
            args: Prisma.customersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload>
          }
          deleteMany: {
            args: Prisma.customersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.customersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.customersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$customersPayload>
          }
          aggregate: {
            args: Prisma.CustomersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomers>
          }
          groupBy: {
            args: Prisma.customersGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomersGroupByOutputType>[]
          }
          count: {
            args: Prisma.customersCountArgs<ExtArgs>
            result: $Utils.Optional<CustomersCountAggregateOutputType> | number
          }
        }
      }
      deliverers: {
        payload: Prisma.$deliverersPayload<ExtArgs>
        fields: Prisma.deliverersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.deliverersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.deliverersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload>
          }
          findFirst: {
            args: Prisma.deliverersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.deliverersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload>
          }
          findMany: {
            args: Prisma.deliverersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload>[]
          }
          create: {
            args: Prisma.deliverersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload>
          }
          createMany: {
            args: Prisma.deliverersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.deliverersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload>
          }
          update: {
            args: Prisma.deliverersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload>
          }
          deleteMany: {
            args: Prisma.deliverersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.deliverersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.deliverersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$deliverersPayload>
          }
          aggregate: {
            args: Prisma.DeliverersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDeliverers>
          }
          groupBy: {
            args: Prisma.deliverersGroupByArgs<ExtArgs>
            result: $Utils.Optional<DeliverersGroupByOutputType>[]
          }
          count: {
            args: Prisma.deliverersCountArgs<ExtArgs>
            result: $Utils.Optional<DeliverersCountAggregateOutputType> | number
          }
        }
      }
      kitchens: {
        payload: Prisma.$kitchensPayload<ExtArgs>
        fields: Prisma.kitchensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.kitchensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.kitchensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload>
          }
          findFirst: {
            args: Prisma.kitchensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.kitchensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload>
          }
          findMany: {
            args: Prisma.kitchensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload>[]
          }
          create: {
            args: Prisma.kitchensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload>
          }
          createMany: {
            args: Prisma.kitchensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.kitchensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload>
          }
          update: {
            args: Prisma.kitchensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload>
          }
          deleteMany: {
            args: Prisma.kitchensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.kitchensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.kitchensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kitchensPayload>
          }
          aggregate: {
            args: Prisma.KitchensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKitchens>
          }
          groupBy: {
            args: Prisma.kitchensGroupByArgs<ExtArgs>
            result: $Utils.Optional<KitchensGroupByOutputType>[]
          }
          count: {
            args: Prisma.kitchensCountArgs<ExtArgs>
            result: $Utils.Optional<KitchensCountAggregateOutputType> | number
          }
        }
      }
      menu: {
        payload: Prisma.$menuPayload<ExtArgs>
        fields: Prisma.menuFieldRefs
        operations: {
          findUnique: {
            args: Prisma.menuFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.menuFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload>
          }
          findFirst: {
            args: Prisma.menuFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.menuFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload>
          }
          findMany: {
            args: Prisma.menuFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload>[]
          }
          create: {
            args: Prisma.menuCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload>
          }
          createMany: {
            args: Prisma.menuCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.menuDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload>
          }
          update: {
            args: Prisma.menuUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload>
          }
          deleteMany: {
            args: Prisma.menuDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.menuUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.menuUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$menuPayload>
          }
          aggregate: {
            args: Prisma.MenuAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMenu>
          }
          groupBy: {
            args: Prisma.menuGroupByArgs<ExtArgs>
            result: $Utils.Optional<MenuGroupByOutputType>[]
          }
          count: {
            args: Prisma.menuCountArgs<ExtArgs>
            result: $Utils.Optional<MenuCountAggregateOutputType> | number
          }
        }
      }
      orders: {
        payload: Prisma.$ordersPayload<ExtArgs>
        fields: Prisma.ordersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ordersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ordersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findFirst: {
            args: Prisma.ordersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ordersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          findMany: {
            args: Prisma.ordersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>[]
          }
          create: {
            args: Prisma.ordersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          createMany: {
            args: Prisma.ordersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ordersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          update: {
            args: Prisma.ordersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          deleteMany: {
            args: Prisma.ordersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ordersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ordersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ordersPayload>
          }
          aggregate: {
            args: Prisma.OrdersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrders>
          }
          groupBy: {
            args: Prisma.ordersGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrdersGroupByOutputType>[]
          }
          count: {
            args: Prisma.ordersCountArgs<ExtArgs>
            result: $Utils.Optional<OrdersCountAggregateOutputType> | number
          }
        }
      }
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomersCountOutputType
   */

  export type CustomersCountOutputType = {
    orders: number
  }

  export type CustomersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | CustomersCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * CustomersCountOutputType without action
   */
  export type CustomersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomersCountOutputType
     */
    select?: CustomersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomersCountOutputType without action
   */
  export type CustomersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }


  /**
   * Count Type DeliverersCountOutputType
   */

  export type DeliverersCountOutputType = {
    orders: number
  }

  export type DeliverersCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    orders?: boolean | DeliverersCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * DeliverersCountOutputType without action
   */
  export type DeliverersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DeliverersCountOutputType
     */
    select?: DeliverersCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DeliverersCountOutputType without action
   */
  export type DeliverersCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }


  /**
   * Count Type KitchensCountOutputType
   */

  export type KitchensCountOutputType = {
    menu: number
    orders: number
  }

  export type KitchensCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    menu?: boolean | KitchensCountOutputTypeCountMenuArgs
    orders?: boolean | KitchensCountOutputTypeCountOrdersArgs
  }

  // Custom InputTypes
  /**
   * KitchensCountOutputType without action
   */
  export type KitchensCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the KitchensCountOutputType
     */
    select?: KitchensCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * KitchensCountOutputType without action
   */
  export type KitchensCountOutputTypeCountMenuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: menuWhereInput
  }

  /**
   * KitchensCountOutputType without action
   */
  export type KitchensCountOutputTypeCountOrdersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
  }


  /**
   * Models
   */

  /**
   * Model customers
   */

  export type AggregateCustomers = {
    _count: CustomersCountAggregateOutputType | null
    _avg: CustomersAvgAggregateOutputType | null
    _sum: CustomersSumAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
  }

  export type CustomersAvgAggregateOutputType = {
    UID: number | null
    LOYALTY_POINTS: number | null
    ORDER_HISTORY: number | null
    RATING: Decimal | null
  }

  export type CustomersSumAggregateOutputType = {
    UID: number | null
    LOYALTY_POINTS: number | null
    ORDER_HISTORY: number | null
    RATING: Decimal | null
  }

  export type CustomersMinAggregateOutputType = {
    UID: number | null
    LOYALTY_POINTS: number | null
    PREFERRED_PAYMENT_METHOD: string | null
    ORDER_HISTORY: number | null
    RATING: Decimal | null
  }

  export type CustomersMaxAggregateOutputType = {
    UID: number | null
    LOYALTY_POINTS: number | null
    PREFERRED_PAYMENT_METHOD: string | null
    ORDER_HISTORY: number | null
    RATING: Decimal | null
  }

  export type CustomersCountAggregateOutputType = {
    UID: number
    LOYALTY_POINTS: number
    PREFERRED_PAYMENT_METHOD: number
    ORDER_HISTORY: number
    RATING: number
    _all: number
  }


  export type CustomersAvgAggregateInputType = {
    UID?: true
    LOYALTY_POINTS?: true
    ORDER_HISTORY?: true
    RATING?: true
  }

  export type CustomersSumAggregateInputType = {
    UID?: true
    LOYALTY_POINTS?: true
    ORDER_HISTORY?: true
    RATING?: true
  }

  export type CustomersMinAggregateInputType = {
    UID?: true
    LOYALTY_POINTS?: true
    PREFERRED_PAYMENT_METHOD?: true
    ORDER_HISTORY?: true
    RATING?: true
  }

  export type CustomersMaxAggregateInputType = {
    UID?: true
    LOYALTY_POINTS?: true
    PREFERRED_PAYMENT_METHOD?: true
    ORDER_HISTORY?: true
    RATING?: true
  }

  export type CustomersCountAggregateInputType = {
    UID?: true
    LOYALTY_POINTS?: true
    PREFERRED_PAYMENT_METHOD?: true
    ORDER_HISTORY?: true
    RATING?: true
    _all?: true
  }

  export type CustomersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customers to aggregate.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customersOrderByWithRelationInput | customersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned customers
    **/
    _count?: true | CustomersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomersMaxAggregateInputType
  }

  export type GetCustomersAggregateType<T extends CustomersAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomers[P]>
      : GetScalarType<T[P], AggregateCustomers[P]>
  }




  export type customersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: customersWhereInput
    orderBy?: customersOrderByWithAggregationInput | customersOrderByWithAggregationInput[]
    by: CustomersScalarFieldEnum[] | CustomersScalarFieldEnum
    having?: customersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomersCountAggregateInputType | true
    _avg?: CustomersAvgAggregateInputType
    _sum?: CustomersSumAggregateInputType
    _min?: CustomersMinAggregateInputType
    _max?: CustomersMaxAggregateInputType
  }

  export type CustomersGroupByOutputType = {
    UID: number
    LOYALTY_POINTS: number | null
    PREFERRED_PAYMENT_METHOD: string | null
    ORDER_HISTORY: number | null
    RATING: Decimal | null
    _count: CustomersCountAggregateOutputType | null
    _avg: CustomersAvgAggregateOutputType | null
    _sum: CustomersSumAggregateOutputType | null
    _min: CustomersMinAggregateOutputType | null
    _max: CustomersMaxAggregateOutputType | null
  }

  type GetCustomersGroupByPayload<T extends customersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomersGroupByOutputType[P]>
            : GetScalarType<T[P], CustomersGroupByOutputType[P]>
        }
      >
    >


  export type customersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    LOYALTY_POINTS?: boolean
    PREFERRED_PAYMENT_METHOD?: boolean
    ORDER_HISTORY?: boolean
    RATING?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    orders?: boolean | customers$ordersArgs<ExtArgs>
    _count?: boolean | CustomersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customers"]>


  export type customersSelectScalar = {
    UID?: boolean
    LOYALTY_POINTS?: boolean
    PREFERRED_PAYMENT_METHOD?: boolean
    ORDER_HISTORY?: boolean
    RATING?: boolean
  }

  export type customersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    orders?: boolean | customers$ordersArgs<ExtArgs>
    _count?: boolean | CustomersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $customersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "customers"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      orders: Prisma.$ordersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UID: number
      LOYALTY_POINTS: number | null
      PREFERRED_PAYMENT_METHOD: string | null
      ORDER_HISTORY: number | null
      RATING: Prisma.Decimal | null
    }, ExtArgs["result"]["customers"]>
    composites: {}
  }

  type customersGetPayload<S extends boolean | null | undefined | customersDefaultArgs> = $Result.GetResult<Prisma.$customersPayload, S>

  type customersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<customersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CustomersCountAggregateInputType | true
    }

  export interface customersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['customers'], meta: { name: 'customers' } }
    /**
     * Find zero or one Customers that matches the filter.
     * @param {customersFindUniqueArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends customersFindUniqueArgs>(args: SelectSubset<T, customersFindUniqueArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Customers that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {customersFindUniqueOrThrowArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends customersFindUniqueOrThrowArgs>(args: SelectSubset<T, customersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindFirstArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends customersFindFirstArgs>(args?: SelectSubset<T, customersFindFirstArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Customers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindFirstOrThrowArgs} args - Arguments to find a Customers
     * @example
     * // Get one Customers
     * const customers = await prisma.customers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends customersFindFirstOrThrowArgs>(args?: SelectSubset<T, customersFindFirstOrThrowArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customers.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customers.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const customersWithUIDOnly = await prisma.customers.findMany({ select: { UID: true } })
     * 
     */
    findMany<T extends customersFindManyArgs>(args?: SelectSubset<T, customersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Customers.
     * @param {customersCreateArgs} args - Arguments to create a Customers.
     * @example
     * // Create one Customers
     * const Customers = await prisma.customers.create({
     *   data: {
     *     // ... data to create a Customers
     *   }
     * })
     * 
     */
    create<T extends customersCreateArgs>(args: SelectSubset<T, customersCreateArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Customers.
     * @param {customersCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customers = await prisma.customers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends customersCreateManyArgs>(args?: SelectSubset<T, customersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Customers.
     * @param {customersDeleteArgs} args - Arguments to delete one Customers.
     * @example
     * // Delete one Customers
     * const Customers = await prisma.customers.delete({
     *   where: {
     *     // ... filter to delete one Customers
     *   }
     * })
     * 
     */
    delete<T extends customersDeleteArgs>(args: SelectSubset<T, customersDeleteArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Customers.
     * @param {customersUpdateArgs} args - Arguments to update one Customers.
     * @example
     * // Update one Customers
     * const customers = await prisma.customers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends customersUpdateArgs>(args: SelectSubset<T, customersUpdateArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Customers.
     * @param {customersDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends customersDeleteManyArgs>(args?: SelectSubset<T, customersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customers = await prisma.customers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends customersUpdateManyArgs>(args: SelectSubset<T, customersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Customers.
     * @param {customersUpsertArgs} args - Arguments to update or create a Customers.
     * @example
     * // Update or create a Customers
     * const customers = await prisma.customers.upsert({
     *   create: {
     *     // ... data to create a Customers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customers we want to update
     *   }
     * })
     */
    upsert<T extends customersUpsertArgs>(args: SelectSubset<T, customersUpsertArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customers.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends customersCountArgs>(
      args?: Subset<T, customersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomersAggregateArgs>(args: Subset<T, CustomersAggregateArgs>): Prisma.PrismaPromise<GetCustomersAggregateType<T>>

    /**
     * Group by Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {customersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends customersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: customersGroupByArgs['orderBy'] }
        : { orderBy?: customersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, customersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the customers model
   */
  readonly fields: customersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for customers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__customersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orders<T extends customers$ordersArgs<ExtArgs> = {}>(args?: Subset<T, customers$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the customers model
   */ 
  interface customersFieldRefs {
    readonly UID: FieldRef<"customers", 'Int'>
    readonly LOYALTY_POINTS: FieldRef<"customers", 'Int'>
    readonly PREFERRED_PAYMENT_METHOD: FieldRef<"customers", 'String'>
    readonly ORDER_HISTORY: FieldRef<"customers", 'Int'>
    readonly RATING: FieldRef<"customers", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * customers findUnique
   */
  export type customersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where: customersWhereUniqueInput
  }

  /**
   * customers findUniqueOrThrow
   */
  export type customersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where: customersWhereUniqueInput
  }

  /**
   * customers findFirst
   */
  export type customersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customersOrderByWithRelationInput | customersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomersScalarFieldEnum | CustomersScalarFieldEnum[]
  }

  /**
   * customers findFirstOrThrow
   */
  export type customersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customersOrderByWithRelationInput | customersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for customers.
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of customers.
     */
    distinct?: CustomersScalarFieldEnum | CustomersScalarFieldEnum[]
  }

  /**
   * customers findMany
   */
  export type customersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * Filter, which customers to fetch.
     */
    where?: customersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of customers to fetch.
     */
    orderBy?: customersOrderByWithRelationInput | customersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing customers.
     */
    cursor?: customersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` customers.
     */
    skip?: number
    distinct?: CustomersScalarFieldEnum | CustomersScalarFieldEnum[]
  }

  /**
   * customers create
   */
  export type customersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * The data needed to create a customers.
     */
    data: XOR<customersCreateInput, customersUncheckedCreateInput>
  }

  /**
   * customers createMany
   */
  export type customersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many customers.
     */
    data: customersCreateManyInput | customersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * customers update
   */
  export type customersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * The data needed to update a customers.
     */
    data: XOR<customersUpdateInput, customersUncheckedUpdateInput>
    /**
     * Choose, which customers to update.
     */
    where: customersWhereUniqueInput
  }

  /**
   * customers updateMany
   */
  export type customersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update customers.
     */
    data: XOR<customersUpdateManyMutationInput, customersUncheckedUpdateManyInput>
    /**
     * Filter which customers to update
     */
    where?: customersWhereInput
  }

  /**
   * customers upsert
   */
  export type customersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * The filter to search for the customers to update in case it exists.
     */
    where: customersWhereUniqueInput
    /**
     * In case the customers found by the `where` argument doesn't exist, create a new customers with this data.
     */
    create: XOR<customersCreateInput, customersUncheckedCreateInput>
    /**
     * In case the customers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<customersUpdateInput, customersUncheckedUpdateInput>
  }

  /**
   * customers delete
   */
  export type customersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    /**
     * Filter which customers to delete.
     */
    where: customersWhereUniqueInput
  }

  /**
   * customers deleteMany
   */
  export type customersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which customers to delete
     */
    where?: customersWhereInput
  }

  /**
   * customers.orders
   */
  export type customers$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * customers without action
   */
  export type customersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
  }


  /**
   * Model deliverers
   */

  export type AggregateDeliverers = {
    _count: DeliverersCountAggregateOutputType | null
    _avg: DeliverersAvgAggregateOutputType | null
    _sum: DeliverersSumAggregateOutputType | null
    _min: DeliverersMinAggregateOutputType | null
    _max: DeliverersMaxAggregateOutputType | null
  }

  export type DeliverersAvgAggregateOutputType = {
    UID: number | null
    DELIVERY_COUNT: number | null
    AVERAGE_RATING: Decimal | null
  }

  export type DeliverersSumAggregateOutputType = {
    UID: number | null
    DELIVERY_COUNT: number | null
    AVERAGE_RATING: Decimal | null
  }

  export type DeliverersMinAggregateOutputType = {
    UID: number | null
    VEHICLE_TYPE: string | null
    DELIVERY_COUNT: number | null
    AVERAGE_RATING: Decimal | null
    WORKING_REGION: string | null
    START_HOUR: Date | null
    END_HOUR: Date | null
  }

  export type DeliverersMaxAggregateOutputType = {
    UID: number | null
    VEHICLE_TYPE: string | null
    DELIVERY_COUNT: number | null
    AVERAGE_RATING: Decimal | null
    WORKING_REGION: string | null
    START_HOUR: Date | null
    END_HOUR: Date | null
  }

  export type DeliverersCountAggregateOutputType = {
    UID: number
    VEHICLE_TYPE: number
    DELIVERY_COUNT: number
    AVERAGE_RATING: number
    WORKING_REGION: number
    START_HOUR: number
    END_HOUR: number
    _all: number
  }


  export type DeliverersAvgAggregateInputType = {
    UID?: true
    DELIVERY_COUNT?: true
    AVERAGE_RATING?: true
  }

  export type DeliverersSumAggregateInputType = {
    UID?: true
    DELIVERY_COUNT?: true
    AVERAGE_RATING?: true
  }

  export type DeliverersMinAggregateInputType = {
    UID?: true
    VEHICLE_TYPE?: true
    DELIVERY_COUNT?: true
    AVERAGE_RATING?: true
    WORKING_REGION?: true
    START_HOUR?: true
    END_HOUR?: true
  }

  export type DeliverersMaxAggregateInputType = {
    UID?: true
    VEHICLE_TYPE?: true
    DELIVERY_COUNT?: true
    AVERAGE_RATING?: true
    WORKING_REGION?: true
    START_HOUR?: true
    END_HOUR?: true
  }

  export type DeliverersCountAggregateInputType = {
    UID?: true
    VEHICLE_TYPE?: true
    DELIVERY_COUNT?: true
    AVERAGE_RATING?: true
    WORKING_REGION?: true
    START_HOUR?: true
    END_HOUR?: true
    _all?: true
  }

  export type DeliverersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deliverers to aggregate.
     */
    where?: deliverersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliverers to fetch.
     */
    orderBy?: deliverersOrderByWithRelationInput | deliverersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: deliverersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliverers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliverers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned deliverers
    **/
    _count?: true | DeliverersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: DeliverersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: DeliverersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DeliverersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DeliverersMaxAggregateInputType
  }

  export type GetDeliverersAggregateType<T extends DeliverersAggregateArgs> = {
        [P in keyof T & keyof AggregateDeliverers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDeliverers[P]>
      : GetScalarType<T[P], AggregateDeliverers[P]>
  }




  export type deliverersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: deliverersWhereInput
    orderBy?: deliverersOrderByWithAggregationInput | deliverersOrderByWithAggregationInput[]
    by: DeliverersScalarFieldEnum[] | DeliverersScalarFieldEnum
    having?: deliverersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DeliverersCountAggregateInputType | true
    _avg?: DeliverersAvgAggregateInputType
    _sum?: DeliverersSumAggregateInputType
    _min?: DeliverersMinAggregateInputType
    _max?: DeliverersMaxAggregateInputType
  }

  export type DeliverersGroupByOutputType = {
    UID: number
    VEHICLE_TYPE: string | null
    DELIVERY_COUNT: number | null
    AVERAGE_RATING: Decimal | null
    WORKING_REGION: string | null
    START_HOUR: Date | null
    END_HOUR: Date | null
    _count: DeliverersCountAggregateOutputType | null
    _avg: DeliverersAvgAggregateOutputType | null
    _sum: DeliverersSumAggregateOutputType | null
    _min: DeliverersMinAggregateOutputType | null
    _max: DeliverersMaxAggregateOutputType | null
  }

  type GetDeliverersGroupByPayload<T extends deliverersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DeliverersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DeliverersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DeliverersGroupByOutputType[P]>
            : GetScalarType<T[P], DeliverersGroupByOutputType[P]>
        }
      >
    >


  export type deliverersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    VEHICLE_TYPE?: boolean
    DELIVERY_COUNT?: boolean
    AVERAGE_RATING?: boolean
    WORKING_REGION?: boolean
    START_HOUR?: boolean
    END_HOUR?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    orders?: boolean | deliverers$ordersArgs<ExtArgs>
    _count?: boolean | DeliverersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["deliverers"]>


  export type deliverersSelectScalar = {
    UID?: boolean
    VEHICLE_TYPE?: boolean
    DELIVERY_COUNT?: boolean
    AVERAGE_RATING?: boolean
    WORKING_REGION?: boolean
    START_HOUR?: boolean
    END_HOUR?: boolean
  }

  export type deliverersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    orders?: boolean | deliverers$ordersArgs<ExtArgs>
    _count?: boolean | DeliverersCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $deliverersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "deliverers"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      orders: Prisma.$ordersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UID: number
      VEHICLE_TYPE: string | null
      DELIVERY_COUNT: number | null
      AVERAGE_RATING: Prisma.Decimal | null
      WORKING_REGION: string | null
      START_HOUR: Date | null
      END_HOUR: Date | null
    }, ExtArgs["result"]["deliverers"]>
    composites: {}
  }

  type deliverersGetPayload<S extends boolean | null | undefined | deliverersDefaultArgs> = $Result.GetResult<Prisma.$deliverersPayload, S>

  type deliverersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<deliverersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: DeliverersCountAggregateInputType | true
    }

  export interface deliverersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['deliverers'], meta: { name: 'deliverers' } }
    /**
     * Find zero or one Deliverers that matches the filter.
     * @param {deliverersFindUniqueArgs} args - Arguments to find a Deliverers
     * @example
     * // Get one Deliverers
     * const deliverers = await prisma.deliverers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends deliverersFindUniqueArgs>(args: SelectSubset<T, deliverersFindUniqueArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Deliverers that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {deliverersFindUniqueOrThrowArgs} args - Arguments to find a Deliverers
     * @example
     * // Get one Deliverers
     * const deliverers = await prisma.deliverers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends deliverersFindUniqueOrThrowArgs>(args: SelectSubset<T, deliverersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Deliverers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliverersFindFirstArgs} args - Arguments to find a Deliverers
     * @example
     * // Get one Deliverers
     * const deliverers = await prisma.deliverers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends deliverersFindFirstArgs>(args?: SelectSubset<T, deliverersFindFirstArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Deliverers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliverersFindFirstOrThrowArgs} args - Arguments to find a Deliverers
     * @example
     * // Get one Deliverers
     * const deliverers = await prisma.deliverers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends deliverersFindFirstOrThrowArgs>(args?: SelectSubset<T, deliverersFindFirstOrThrowArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Deliverers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliverersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Deliverers
     * const deliverers = await prisma.deliverers.findMany()
     * 
     * // Get first 10 Deliverers
     * const deliverers = await prisma.deliverers.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const deliverersWithUIDOnly = await prisma.deliverers.findMany({ select: { UID: true } })
     * 
     */
    findMany<T extends deliverersFindManyArgs>(args?: SelectSubset<T, deliverersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Deliverers.
     * @param {deliverersCreateArgs} args - Arguments to create a Deliverers.
     * @example
     * // Create one Deliverers
     * const Deliverers = await prisma.deliverers.create({
     *   data: {
     *     // ... data to create a Deliverers
     *   }
     * })
     * 
     */
    create<T extends deliverersCreateArgs>(args: SelectSubset<T, deliverersCreateArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Deliverers.
     * @param {deliverersCreateManyArgs} args - Arguments to create many Deliverers.
     * @example
     * // Create many Deliverers
     * const deliverers = await prisma.deliverers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends deliverersCreateManyArgs>(args?: SelectSubset<T, deliverersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Deliverers.
     * @param {deliverersDeleteArgs} args - Arguments to delete one Deliverers.
     * @example
     * // Delete one Deliverers
     * const Deliverers = await prisma.deliverers.delete({
     *   where: {
     *     // ... filter to delete one Deliverers
     *   }
     * })
     * 
     */
    delete<T extends deliverersDeleteArgs>(args: SelectSubset<T, deliverersDeleteArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Deliverers.
     * @param {deliverersUpdateArgs} args - Arguments to update one Deliverers.
     * @example
     * // Update one Deliverers
     * const deliverers = await prisma.deliverers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends deliverersUpdateArgs>(args: SelectSubset<T, deliverersUpdateArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Deliverers.
     * @param {deliverersDeleteManyArgs} args - Arguments to filter Deliverers to delete.
     * @example
     * // Delete a few Deliverers
     * const { count } = await prisma.deliverers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends deliverersDeleteManyArgs>(args?: SelectSubset<T, deliverersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Deliverers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliverersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Deliverers
     * const deliverers = await prisma.deliverers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends deliverersUpdateManyArgs>(args: SelectSubset<T, deliverersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Deliverers.
     * @param {deliverersUpsertArgs} args - Arguments to update or create a Deliverers.
     * @example
     * // Update or create a Deliverers
     * const deliverers = await prisma.deliverers.upsert({
     *   create: {
     *     // ... data to create a Deliverers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Deliverers we want to update
     *   }
     * })
     */
    upsert<T extends deliverersUpsertArgs>(args: SelectSubset<T, deliverersUpsertArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Deliverers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliverersCountArgs} args - Arguments to filter Deliverers to count.
     * @example
     * // Count the number of Deliverers
     * const count = await prisma.deliverers.count({
     *   where: {
     *     // ... the filter for the Deliverers we want to count
     *   }
     * })
    **/
    count<T extends deliverersCountArgs>(
      args?: Subset<T, deliverersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DeliverersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Deliverers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DeliverersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DeliverersAggregateArgs>(args: Subset<T, DeliverersAggregateArgs>): Prisma.PrismaPromise<GetDeliverersAggregateType<T>>

    /**
     * Group by Deliverers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {deliverersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends deliverersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: deliverersGroupByArgs['orderBy'] }
        : { orderBy?: deliverersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, deliverersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDeliverersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the deliverers model
   */
  readonly fields: deliverersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for deliverers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__deliverersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    orders<T extends deliverers$ordersArgs<ExtArgs> = {}>(args?: Subset<T, deliverers$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the deliverers model
   */ 
  interface deliverersFieldRefs {
    readonly UID: FieldRef<"deliverers", 'Int'>
    readonly VEHICLE_TYPE: FieldRef<"deliverers", 'String'>
    readonly DELIVERY_COUNT: FieldRef<"deliverers", 'Int'>
    readonly AVERAGE_RATING: FieldRef<"deliverers", 'Decimal'>
    readonly WORKING_REGION: FieldRef<"deliverers", 'String'>
    readonly START_HOUR: FieldRef<"deliverers", 'DateTime'>
    readonly END_HOUR: FieldRef<"deliverers", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * deliverers findUnique
   */
  export type deliverersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * Filter, which deliverers to fetch.
     */
    where: deliverersWhereUniqueInput
  }

  /**
   * deliverers findUniqueOrThrow
   */
  export type deliverersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * Filter, which deliverers to fetch.
     */
    where: deliverersWhereUniqueInput
  }

  /**
   * deliverers findFirst
   */
  export type deliverersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * Filter, which deliverers to fetch.
     */
    where?: deliverersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliverers to fetch.
     */
    orderBy?: deliverersOrderByWithRelationInput | deliverersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliverers.
     */
    cursor?: deliverersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliverers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliverers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliverers.
     */
    distinct?: DeliverersScalarFieldEnum | DeliverersScalarFieldEnum[]
  }

  /**
   * deliverers findFirstOrThrow
   */
  export type deliverersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * Filter, which deliverers to fetch.
     */
    where?: deliverersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliverers to fetch.
     */
    orderBy?: deliverersOrderByWithRelationInput | deliverersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for deliverers.
     */
    cursor?: deliverersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliverers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliverers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of deliverers.
     */
    distinct?: DeliverersScalarFieldEnum | DeliverersScalarFieldEnum[]
  }

  /**
   * deliverers findMany
   */
  export type deliverersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * Filter, which deliverers to fetch.
     */
    where?: deliverersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of deliverers to fetch.
     */
    orderBy?: deliverersOrderByWithRelationInput | deliverersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing deliverers.
     */
    cursor?: deliverersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` deliverers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` deliverers.
     */
    skip?: number
    distinct?: DeliverersScalarFieldEnum | DeliverersScalarFieldEnum[]
  }

  /**
   * deliverers create
   */
  export type deliverersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * The data needed to create a deliverers.
     */
    data: XOR<deliverersCreateInput, deliverersUncheckedCreateInput>
  }

  /**
   * deliverers createMany
   */
  export type deliverersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many deliverers.
     */
    data: deliverersCreateManyInput | deliverersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * deliverers update
   */
  export type deliverersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * The data needed to update a deliverers.
     */
    data: XOR<deliverersUpdateInput, deliverersUncheckedUpdateInput>
    /**
     * Choose, which deliverers to update.
     */
    where: deliverersWhereUniqueInput
  }

  /**
   * deliverers updateMany
   */
  export type deliverersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update deliverers.
     */
    data: XOR<deliverersUpdateManyMutationInput, deliverersUncheckedUpdateManyInput>
    /**
     * Filter which deliverers to update
     */
    where?: deliverersWhereInput
  }

  /**
   * deliverers upsert
   */
  export type deliverersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * The filter to search for the deliverers to update in case it exists.
     */
    where: deliverersWhereUniqueInput
    /**
     * In case the deliverers found by the `where` argument doesn't exist, create a new deliverers with this data.
     */
    create: XOR<deliverersCreateInput, deliverersUncheckedCreateInput>
    /**
     * In case the deliverers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<deliverersUpdateInput, deliverersUncheckedUpdateInput>
  }

  /**
   * deliverers delete
   */
  export type deliverersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    /**
     * Filter which deliverers to delete.
     */
    where: deliverersWhereUniqueInput
  }

  /**
   * deliverers deleteMany
   */
  export type deliverersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which deliverers to delete
     */
    where?: deliverersWhereInput
  }

  /**
   * deliverers.orders
   */
  export type deliverers$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * deliverers without action
   */
  export type deliverersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
  }


  /**
   * Model kitchens
   */

  export type AggregateKitchens = {
    _count: KitchensCountAggregateOutputType | null
    _avg: KitchensAvgAggregateOutputType | null
    _sum: KitchensSumAggregateOutputType | null
    _min: KitchensMinAggregateOutputType | null
    _max: KitchensMaxAggregateOutputType | null
  }

  export type KitchensAvgAggregateOutputType = {
    UID: number | null
    RATING: Decimal | null
  }

  export type KitchensSumAggregateOutputType = {
    UID: number | null
    RATING: Decimal | null
  }

  export type KitchensMinAggregateOutputType = {
    UID: number | null
    CUISINE_TYPE: string | null
    AVERAGE_PREPARATION_TIME: Date | null
    RATING: Decimal | null
    ACTIVE_STATUS: boolean | null
    START_HOUR: Date | null
    END_HOUR: Date | null
  }

  export type KitchensMaxAggregateOutputType = {
    UID: number | null
    CUISINE_TYPE: string | null
    AVERAGE_PREPARATION_TIME: Date | null
    RATING: Decimal | null
    ACTIVE_STATUS: boolean | null
    START_HOUR: Date | null
    END_HOUR: Date | null
  }

  export type KitchensCountAggregateOutputType = {
    UID: number
    CUISINE_TYPE: number
    AVERAGE_PREPARATION_TIME: number
    RATING: number
    ACTIVE_STATUS: number
    START_HOUR: number
    END_HOUR: number
    _all: number
  }


  export type KitchensAvgAggregateInputType = {
    UID?: true
    RATING?: true
  }

  export type KitchensSumAggregateInputType = {
    UID?: true
    RATING?: true
  }

  export type KitchensMinAggregateInputType = {
    UID?: true
    CUISINE_TYPE?: true
    AVERAGE_PREPARATION_TIME?: true
    RATING?: true
    ACTIVE_STATUS?: true
    START_HOUR?: true
    END_HOUR?: true
  }

  export type KitchensMaxAggregateInputType = {
    UID?: true
    CUISINE_TYPE?: true
    AVERAGE_PREPARATION_TIME?: true
    RATING?: true
    ACTIVE_STATUS?: true
    START_HOUR?: true
    END_HOUR?: true
  }

  export type KitchensCountAggregateInputType = {
    UID?: true
    CUISINE_TYPE?: true
    AVERAGE_PREPARATION_TIME?: true
    RATING?: true
    ACTIVE_STATUS?: true
    START_HOUR?: true
    END_HOUR?: true
    _all?: true
  }

  export type KitchensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which kitchens to aggregate.
     */
    where?: kitchensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kitchens to fetch.
     */
    orderBy?: kitchensOrderByWithRelationInput | kitchensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: kitchensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kitchens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kitchens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned kitchens
    **/
    _count?: true | KitchensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: KitchensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: KitchensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KitchensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KitchensMaxAggregateInputType
  }

  export type GetKitchensAggregateType<T extends KitchensAggregateArgs> = {
        [P in keyof T & keyof AggregateKitchens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKitchens[P]>
      : GetScalarType<T[P], AggregateKitchens[P]>
  }




  export type kitchensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: kitchensWhereInput
    orderBy?: kitchensOrderByWithAggregationInput | kitchensOrderByWithAggregationInput[]
    by: KitchensScalarFieldEnum[] | KitchensScalarFieldEnum
    having?: kitchensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KitchensCountAggregateInputType | true
    _avg?: KitchensAvgAggregateInputType
    _sum?: KitchensSumAggregateInputType
    _min?: KitchensMinAggregateInputType
    _max?: KitchensMaxAggregateInputType
  }

  export type KitchensGroupByOutputType = {
    UID: number
    CUISINE_TYPE: string | null
    AVERAGE_PREPARATION_TIME: Date | null
    RATING: Decimal | null
    ACTIVE_STATUS: boolean | null
    START_HOUR: Date | null
    END_HOUR: Date | null
    _count: KitchensCountAggregateOutputType | null
    _avg: KitchensAvgAggregateOutputType | null
    _sum: KitchensSumAggregateOutputType | null
    _min: KitchensMinAggregateOutputType | null
    _max: KitchensMaxAggregateOutputType | null
  }

  type GetKitchensGroupByPayload<T extends kitchensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KitchensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KitchensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KitchensGroupByOutputType[P]>
            : GetScalarType<T[P], KitchensGroupByOutputType[P]>
        }
      >
    >


  export type kitchensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    CUISINE_TYPE?: boolean
    AVERAGE_PREPARATION_TIME?: boolean
    RATING?: boolean
    ACTIVE_STATUS?: boolean
    START_HOUR?: boolean
    END_HOUR?: boolean
    users?: boolean | usersDefaultArgs<ExtArgs>
    menu?: boolean | kitchens$menuArgs<ExtArgs>
    orders?: boolean | kitchens$ordersArgs<ExtArgs>
    _count?: boolean | KitchensCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kitchens"]>


  export type kitchensSelectScalar = {
    UID?: boolean
    CUISINE_TYPE?: boolean
    AVERAGE_PREPARATION_TIME?: boolean
    RATING?: boolean
    ACTIVE_STATUS?: boolean
    START_HOUR?: boolean
    END_HOUR?: boolean
  }

  export type kitchensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | usersDefaultArgs<ExtArgs>
    menu?: boolean | kitchens$menuArgs<ExtArgs>
    orders?: boolean | kitchens$ordersArgs<ExtArgs>
    _count?: boolean | KitchensCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $kitchensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "kitchens"
    objects: {
      users: Prisma.$usersPayload<ExtArgs>
      menu: Prisma.$menuPayload<ExtArgs>[]
      orders: Prisma.$ordersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      UID: number
      CUISINE_TYPE: string | null
      AVERAGE_PREPARATION_TIME: Date | null
      RATING: Prisma.Decimal | null
      ACTIVE_STATUS: boolean | null
      START_HOUR: Date | null
      END_HOUR: Date | null
    }, ExtArgs["result"]["kitchens"]>
    composites: {}
  }

  type kitchensGetPayload<S extends boolean | null | undefined | kitchensDefaultArgs> = $Result.GetResult<Prisma.$kitchensPayload, S>

  type kitchensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<kitchensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: KitchensCountAggregateInputType | true
    }

  export interface kitchensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['kitchens'], meta: { name: 'kitchens' } }
    /**
     * Find zero or one Kitchens that matches the filter.
     * @param {kitchensFindUniqueArgs} args - Arguments to find a Kitchens
     * @example
     * // Get one Kitchens
     * const kitchens = await prisma.kitchens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends kitchensFindUniqueArgs>(args: SelectSubset<T, kitchensFindUniqueArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Kitchens that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {kitchensFindUniqueOrThrowArgs} args - Arguments to find a Kitchens
     * @example
     * // Get one Kitchens
     * const kitchens = await prisma.kitchens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends kitchensFindUniqueOrThrowArgs>(args: SelectSubset<T, kitchensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Kitchens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kitchensFindFirstArgs} args - Arguments to find a Kitchens
     * @example
     * // Get one Kitchens
     * const kitchens = await prisma.kitchens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends kitchensFindFirstArgs>(args?: SelectSubset<T, kitchensFindFirstArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Kitchens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kitchensFindFirstOrThrowArgs} args - Arguments to find a Kitchens
     * @example
     * // Get one Kitchens
     * const kitchens = await prisma.kitchens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends kitchensFindFirstOrThrowArgs>(args?: SelectSubset<T, kitchensFindFirstOrThrowArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Kitchens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kitchensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Kitchens
     * const kitchens = await prisma.kitchens.findMany()
     * 
     * // Get first 10 Kitchens
     * const kitchens = await prisma.kitchens.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const kitchensWithUIDOnly = await prisma.kitchens.findMany({ select: { UID: true } })
     * 
     */
    findMany<T extends kitchensFindManyArgs>(args?: SelectSubset<T, kitchensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Kitchens.
     * @param {kitchensCreateArgs} args - Arguments to create a Kitchens.
     * @example
     * // Create one Kitchens
     * const Kitchens = await prisma.kitchens.create({
     *   data: {
     *     // ... data to create a Kitchens
     *   }
     * })
     * 
     */
    create<T extends kitchensCreateArgs>(args: SelectSubset<T, kitchensCreateArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Kitchens.
     * @param {kitchensCreateManyArgs} args - Arguments to create many Kitchens.
     * @example
     * // Create many Kitchens
     * const kitchens = await prisma.kitchens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends kitchensCreateManyArgs>(args?: SelectSubset<T, kitchensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Kitchens.
     * @param {kitchensDeleteArgs} args - Arguments to delete one Kitchens.
     * @example
     * // Delete one Kitchens
     * const Kitchens = await prisma.kitchens.delete({
     *   where: {
     *     // ... filter to delete one Kitchens
     *   }
     * })
     * 
     */
    delete<T extends kitchensDeleteArgs>(args: SelectSubset<T, kitchensDeleteArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Kitchens.
     * @param {kitchensUpdateArgs} args - Arguments to update one Kitchens.
     * @example
     * // Update one Kitchens
     * const kitchens = await prisma.kitchens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends kitchensUpdateArgs>(args: SelectSubset<T, kitchensUpdateArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Kitchens.
     * @param {kitchensDeleteManyArgs} args - Arguments to filter Kitchens to delete.
     * @example
     * // Delete a few Kitchens
     * const { count } = await prisma.kitchens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends kitchensDeleteManyArgs>(args?: SelectSubset<T, kitchensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Kitchens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kitchensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Kitchens
     * const kitchens = await prisma.kitchens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends kitchensUpdateManyArgs>(args: SelectSubset<T, kitchensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Kitchens.
     * @param {kitchensUpsertArgs} args - Arguments to update or create a Kitchens.
     * @example
     * // Update or create a Kitchens
     * const kitchens = await prisma.kitchens.upsert({
     *   create: {
     *     // ... data to create a Kitchens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Kitchens we want to update
     *   }
     * })
     */
    upsert<T extends kitchensUpsertArgs>(args: SelectSubset<T, kitchensUpsertArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Kitchens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kitchensCountArgs} args - Arguments to filter Kitchens to count.
     * @example
     * // Count the number of Kitchens
     * const count = await prisma.kitchens.count({
     *   where: {
     *     // ... the filter for the Kitchens we want to count
     *   }
     * })
    **/
    count<T extends kitchensCountArgs>(
      args?: Subset<T, kitchensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KitchensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Kitchens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KitchensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KitchensAggregateArgs>(args: Subset<T, KitchensAggregateArgs>): Prisma.PrismaPromise<GetKitchensAggregateType<T>>

    /**
     * Group by Kitchens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kitchensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends kitchensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: kitchensGroupByArgs['orderBy'] }
        : { orderBy?: kitchensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, kitchensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKitchensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the kitchens model
   */
  readonly fields: kitchensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for kitchens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__kitchensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    menu<T extends kitchens$menuArgs<ExtArgs> = {}>(args?: Subset<T, kitchens$menuArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "findMany"> | Null>
    orders<T extends kitchens$ordersArgs<ExtArgs> = {}>(args?: Subset<T, kitchens$ordersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the kitchens model
   */ 
  interface kitchensFieldRefs {
    readonly UID: FieldRef<"kitchens", 'Int'>
    readonly CUISINE_TYPE: FieldRef<"kitchens", 'String'>
    readonly AVERAGE_PREPARATION_TIME: FieldRef<"kitchens", 'DateTime'>
    readonly RATING: FieldRef<"kitchens", 'Decimal'>
    readonly ACTIVE_STATUS: FieldRef<"kitchens", 'Boolean'>
    readonly START_HOUR: FieldRef<"kitchens", 'DateTime'>
    readonly END_HOUR: FieldRef<"kitchens", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * kitchens findUnique
   */
  export type kitchensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * Filter, which kitchens to fetch.
     */
    where: kitchensWhereUniqueInput
  }

  /**
   * kitchens findUniqueOrThrow
   */
  export type kitchensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * Filter, which kitchens to fetch.
     */
    where: kitchensWhereUniqueInput
  }

  /**
   * kitchens findFirst
   */
  export type kitchensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * Filter, which kitchens to fetch.
     */
    where?: kitchensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kitchens to fetch.
     */
    orderBy?: kitchensOrderByWithRelationInput | kitchensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kitchens.
     */
    cursor?: kitchensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kitchens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kitchens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kitchens.
     */
    distinct?: KitchensScalarFieldEnum | KitchensScalarFieldEnum[]
  }

  /**
   * kitchens findFirstOrThrow
   */
  export type kitchensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * Filter, which kitchens to fetch.
     */
    where?: kitchensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kitchens to fetch.
     */
    orderBy?: kitchensOrderByWithRelationInput | kitchensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kitchens.
     */
    cursor?: kitchensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kitchens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kitchens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kitchens.
     */
    distinct?: KitchensScalarFieldEnum | KitchensScalarFieldEnum[]
  }

  /**
   * kitchens findMany
   */
  export type kitchensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * Filter, which kitchens to fetch.
     */
    where?: kitchensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kitchens to fetch.
     */
    orderBy?: kitchensOrderByWithRelationInput | kitchensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing kitchens.
     */
    cursor?: kitchensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kitchens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kitchens.
     */
    skip?: number
    distinct?: KitchensScalarFieldEnum | KitchensScalarFieldEnum[]
  }

  /**
   * kitchens create
   */
  export type kitchensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * The data needed to create a kitchens.
     */
    data: XOR<kitchensCreateInput, kitchensUncheckedCreateInput>
  }

  /**
   * kitchens createMany
   */
  export type kitchensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many kitchens.
     */
    data: kitchensCreateManyInput | kitchensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * kitchens update
   */
  export type kitchensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * The data needed to update a kitchens.
     */
    data: XOR<kitchensUpdateInput, kitchensUncheckedUpdateInput>
    /**
     * Choose, which kitchens to update.
     */
    where: kitchensWhereUniqueInput
  }

  /**
   * kitchens updateMany
   */
  export type kitchensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update kitchens.
     */
    data: XOR<kitchensUpdateManyMutationInput, kitchensUncheckedUpdateManyInput>
    /**
     * Filter which kitchens to update
     */
    where?: kitchensWhereInput
  }

  /**
   * kitchens upsert
   */
  export type kitchensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * The filter to search for the kitchens to update in case it exists.
     */
    where: kitchensWhereUniqueInput
    /**
     * In case the kitchens found by the `where` argument doesn't exist, create a new kitchens with this data.
     */
    create: XOR<kitchensCreateInput, kitchensUncheckedCreateInput>
    /**
     * In case the kitchens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<kitchensUpdateInput, kitchensUncheckedUpdateInput>
  }

  /**
   * kitchens delete
   */
  export type kitchensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    /**
     * Filter which kitchens to delete.
     */
    where: kitchensWhereUniqueInput
  }

  /**
   * kitchens deleteMany
   */
  export type kitchensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which kitchens to delete
     */
    where?: kitchensWhereInput
  }

  /**
   * kitchens.menu
   */
  export type kitchens$menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    where?: menuWhereInput
    orderBy?: menuOrderByWithRelationInput | menuOrderByWithRelationInput[]
    cursor?: menuWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * kitchens.orders
   */
  export type kitchens$ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    cursor?: ordersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * kitchens without action
   */
  export type kitchensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
  }


  /**
   * Model menu
   */

  export type AggregateMenu = {
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  export type MenuAvgAggregateOutputType = {
    UID: number | null
    MENU_ID: number | null
    PRICE: Decimal | null
  }

  export type MenuSumAggregateOutputType = {
    UID: number | null
    MENU_ID: number | null
    PRICE: Decimal | null
  }

  export type MenuMinAggregateOutputType = {
    UID: number | null
    MENU_ID: number | null
    FOOD_NAME: string | null
    FOOD_ALLERGENS: string | null
    PRICE: Decimal | null
  }

  export type MenuMaxAggregateOutputType = {
    UID: number | null
    MENU_ID: number | null
    FOOD_NAME: string | null
    FOOD_ALLERGENS: string | null
    PRICE: Decimal | null
  }

  export type MenuCountAggregateOutputType = {
    UID: number
    MENU_ID: number
    FOOD_NAME: number
    FOOD_ALLERGENS: number
    PRICE: number
    _all: number
  }


  export type MenuAvgAggregateInputType = {
    UID?: true
    MENU_ID?: true
    PRICE?: true
  }

  export type MenuSumAggregateInputType = {
    UID?: true
    MENU_ID?: true
    PRICE?: true
  }

  export type MenuMinAggregateInputType = {
    UID?: true
    MENU_ID?: true
    FOOD_NAME?: true
    FOOD_ALLERGENS?: true
    PRICE?: true
  }

  export type MenuMaxAggregateInputType = {
    UID?: true
    MENU_ID?: true
    FOOD_NAME?: true
    FOOD_ALLERGENS?: true
    PRICE?: true
  }

  export type MenuCountAggregateInputType = {
    UID?: true
    MENU_ID?: true
    FOOD_NAME?: true
    FOOD_ALLERGENS?: true
    PRICE?: true
    _all?: true
  }

  export type MenuAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which menu to aggregate.
     */
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     */
    orderBy?: menuOrderByWithRelationInput | menuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned menus
    **/
    _count?: true | MenuCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MenuAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MenuSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MenuMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MenuMaxAggregateInputType
  }

  export type GetMenuAggregateType<T extends MenuAggregateArgs> = {
        [P in keyof T & keyof AggregateMenu]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMenu[P]>
      : GetScalarType<T[P], AggregateMenu[P]>
  }




  export type menuGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: menuWhereInput
    orderBy?: menuOrderByWithAggregationInput | menuOrderByWithAggregationInput[]
    by: MenuScalarFieldEnum[] | MenuScalarFieldEnum
    having?: menuScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MenuCountAggregateInputType | true
    _avg?: MenuAvgAggregateInputType
    _sum?: MenuSumAggregateInputType
    _min?: MenuMinAggregateInputType
    _max?: MenuMaxAggregateInputType
  }

  export type MenuGroupByOutputType = {
    UID: number
    MENU_ID: number
    FOOD_NAME: string | null
    FOOD_ALLERGENS: string | null
    PRICE: Decimal | null
    _count: MenuCountAggregateOutputType | null
    _avg: MenuAvgAggregateOutputType | null
    _sum: MenuSumAggregateOutputType | null
    _min: MenuMinAggregateOutputType | null
    _max: MenuMaxAggregateOutputType | null
  }

  type GetMenuGroupByPayload<T extends menuGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MenuGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MenuGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MenuGroupByOutputType[P]>
            : GetScalarType<T[P], MenuGroupByOutputType[P]>
        }
      >
    >


  export type menuSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    MENU_ID?: boolean
    FOOD_NAME?: boolean
    FOOD_ALLERGENS?: boolean
    PRICE?: boolean
    kitchens?: boolean | kitchensDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["menu"]>


  export type menuSelectScalar = {
    UID?: boolean
    MENU_ID?: boolean
    FOOD_NAME?: boolean
    FOOD_ALLERGENS?: boolean
    PRICE?: boolean
  }

  export type menuInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    kitchens?: boolean | kitchensDefaultArgs<ExtArgs>
  }

  export type $menuPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "menu"
    objects: {
      kitchens: Prisma.$kitchensPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      UID: number
      MENU_ID: number
      FOOD_NAME: string | null
      FOOD_ALLERGENS: string | null
      PRICE: Prisma.Decimal | null
    }, ExtArgs["result"]["menu"]>
    composites: {}
  }

  type menuGetPayload<S extends boolean | null | undefined | menuDefaultArgs> = $Result.GetResult<Prisma.$menuPayload, S>

  type menuCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<menuFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MenuCountAggregateInputType | true
    }

  export interface menuDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['menu'], meta: { name: 'menu' } }
    /**
     * Find zero or one Menu that matches the filter.
     * @param {menuFindUniqueArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends menuFindUniqueArgs>(args: SelectSubset<T, menuFindUniqueArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Menu that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {menuFindUniqueOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends menuFindUniqueOrThrowArgs>(args: SelectSubset<T, menuFindUniqueOrThrowArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Menu that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuFindFirstArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends menuFindFirstArgs>(args?: SelectSubset<T, menuFindFirstArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Menu that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuFindFirstOrThrowArgs} args - Arguments to find a Menu
     * @example
     * // Get one Menu
     * const menu = await prisma.menu.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends menuFindFirstOrThrowArgs>(args?: SelectSubset<T, menuFindFirstOrThrowArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Menus that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Menus
     * const menus = await prisma.menu.findMany()
     * 
     * // Get first 10 Menus
     * const menus = await prisma.menu.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const menuWithUIDOnly = await prisma.menu.findMany({ select: { UID: true } })
     * 
     */
    findMany<T extends menuFindManyArgs>(args?: SelectSubset<T, menuFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Menu.
     * @param {menuCreateArgs} args - Arguments to create a Menu.
     * @example
     * // Create one Menu
     * const Menu = await prisma.menu.create({
     *   data: {
     *     // ... data to create a Menu
     *   }
     * })
     * 
     */
    create<T extends menuCreateArgs>(args: SelectSubset<T, menuCreateArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Menus.
     * @param {menuCreateManyArgs} args - Arguments to create many Menus.
     * @example
     * // Create many Menus
     * const menu = await prisma.menu.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends menuCreateManyArgs>(args?: SelectSubset<T, menuCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Menu.
     * @param {menuDeleteArgs} args - Arguments to delete one Menu.
     * @example
     * // Delete one Menu
     * const Menu = await prisma.menu.delete({
     *   where: {
     *     // ... filter to delete one Menu
     *   }
     * })
     * 
     */
    delete<T extends menuDeleteArgs>(args: SelectSubset<T, menuDeleteArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Menu.
     * @param {menuUpdateArgs} args - Arguments to update one Menu.
     * @example
     * // Update one Menu
     * const menu = await prisma.menu.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends menuUpdateArgs>(args: SelectSubset<T, menuUpdateArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Menus.
     * @param {menuDeleteManyArgs} args - Arguments to filter Menus to delete.
     * @example
     * // Delete a few Menus
     * const { count } = await prisma.menu.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends menuDeleteManyArgs>(args?: SelectSubset<T, menuDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Menus
     * const menu = await prisma.menu.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends menuUpdateManyArgs>(args: SelectSubset<T, menuUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Menu.
     * @param {menuUpsertArgs} args - Arguments to update or create a Menu.
     * @example
     * // Update or create a Menu
     * const menu = await prisma.menu.upsert({
     *   create: {
     *     // ... data to create a Menu
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Menu we want to update
     *   }
     * })
     */
    upsert<T extends menuUpsertArgs>(args: SelectSubset<T, menuUpsertArgs<ExtArgs>>): Prisma__menuClient<$Result.GetResult<Prisma.$menuPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Menus.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuCountArgs} args - Arguments to filter Menus to count.
     * @example
     * // Count the number of Menus
     * const count = await prisma.menu.count({
     *   where: {
     *     // ... the filter for the Menus we want to count
     *   }
     * })
    **/
    count<T extends menuCountArgs>(
      args?: Subset<T, menuCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MenuCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MenuAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MenuAggregateArgs>(args: Subset<T, MenuAggregateArgs>): Prisma.PrismaPromise<GetMenuAggregateType<T>>

    /**
     * Group by Menu.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {menuGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends menuGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: menuGroupByArgs['orderBy'] }
        : { orderBy?: menuGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, menuGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMenuGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the menu model
   */
  readonly fields: menuFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for menu.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__menuClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    kitchens<T extends kitchensDefaultArgs<ExtArgs> = {}>(args?: Subset<T, kitchensDefaultArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the menu model
   */ 
  interface menuFieldRefs {
    readonly UID: FieldRef<"menu", 'Int'>
    readonly MENU_ID: FieldRef<"menu", 'Int'>
    readonly FOOD_NAME: FieldRef<"menu", 'String'>
    readonly FOOD_ALLERGENS: FieldRef<"menu", 'String'>
    readonly PRICE: FieldRef<"menu", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * menu findUnique
   */
  export type menuFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * Filter, which menu to fetch.
     */
    where: menuWhereUniqueInput
  }

  /**
   * menu findUniqueOrThrow
   */
  export type menuFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * Filter, which menu to fetch.
     */
    where: menuWhereUniqueInput
  }

  /**
   * menu findFirst
   */
  export type menuFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * Filter, which menu to fetch.
     */
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     */
    orderBy?: menuOrderByWithRelationInput | menuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menus.
     */
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * menu findFirstOrThrow
   */
  export type menuFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * Filter, which menu to fetch.
     */
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     */
    orderBy?: menuOrderByWithRelationInput | menuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for menus.
     */
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of menus.
     */
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * menu findMany
   */
  export type menuFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * Filter, which menus to fetch.
     */
    where?: menuWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of menus to fetch.
     */
    orderBy?: menuOrderByWithRelationInput | menuOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing menus.
     */
    cursor?: menuWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` menus from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` menus.
     */
    skip?: number
    distinct?: MenuScalarFieldEnum | MenuScalarFieldEnum[]
  }

  /**
   * menu create
   */
  export type menuCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * The data needed to create a menu.
     */
    data: XOR<menuCreateInput, menuUncheckedCreateInput>
  }

  /**
   * menu createMany
   */
  export type menuCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many menus.
     */
    data: menuCreateManyInput | menuCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * menu update
   */
  export type menuUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * The data needed to update a menu.
     */
    data: XOR<menuUpdateInput, menuUncheckedUpdateInput>
    /**
     * Choose, which menu to update.
     */
    where: menuWhereUniqueInput
  }

  /**
   * menu updateMany
   */
  export type menuUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update menus.
     */
    data: XOR<menuUpdateManyMutationInput, menuUncheckedUpdateManyInput>
    /**
     * Filter which menus to update
     */
    where?: menuWhereInput
  }

  /**
   * menu upsert
   */
  export type menuUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * The filter to search for the menu to update in case it exists.
     */
    where: menuWhereUniqueInput
    /**
     * In case the menu found by the `where` argument doesn't exist, create a new menu with this data.
     */
    create: XOR<menuCreateInput, menuUncheckedCreateInput>
    /**
     * In case the menu was found with the provided `where` argument, update it with this data.
     */
    update: XOR<menuUpdateInput, menuUncheckedUpdateInput>
  }

  /**
   * menu delete
   */
  export type menuDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
    /**
     * Filter which menu to delete.
     */
    where: menuWhereUniqueInput
  }

  /**
   * menu deleteMany
   */
  export type menuDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which menus to delete
     */
    where?: menuWhereInput
  }

  /**
   * menu without action
   */
  export type menuDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the menu
     */
    select?: menuSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: menuInclude<ExtArgs> | null
  }


  /**
   * Model orders
   */

  export type AggregateOrders = {
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  export type OrdersAvgAggregateOutputType = {
    ORDER_ID: number | null
    CUSTOMER_ID: number | null
    KITCHEN_ID: number | null
    DELIVERER_ID: number | null
    TOTAL_AMOUNT: Decimal | null
  }

  export type OrdersSumAggregateOutputType = {
    ORDER_ID: number | null
    CUSTOMER_ID: number | null
    KITCHEN_ID: number | null
    DELIVERER_ID: number | null
    TOTAL_AMOUNT: Decimal | null
  }

  export type OrdersMinAggregateOutputType = {
    ORDER_ID: number | null
    CUSTOMER_ID: number | null
    KITCHEN_ID: number | null
    DELIVERER_ID: number | null
    ORDER_DATE: Date | null
    STATUS: string | null
    TOTAL_AMOUNT: Decimal | null
  }

  export type OrdersMaxAggregateOutputType = {
    ORDER_ID: number | null
    CUSTOMER_ID: number | null
    KITCHEN_ID: number | null
    DELIVERER_ID: number | null
    ORDER_DATE: Date | null
    STATUS: string | null
    TOTAL_AMOUNT: Decimal | null
  }

  export type OrdersCountAggregateOutputType = {
    ORDER_ID: number
    CUSTOMER_ID: number
    KITCHEN_ID: number
    DELIVERER_ID: number
    ORDER_DATE: number
    STATUS: number
    TOTAL_AMOUNT: number
    _all: number
  }


  export type OrdersAvgAggregateInputType = {
    ORDER_ID?: true
    CUSTOMER_ID?: true
    KITCHEN_ID?: true
    DELIVERER_ID?: true
    TOTAL_AMOUNT?: true
  }

  export type OrdersSumAggregateInputType = {
    ORDER_ID?: true
    CUSTOMER_ID?: true
    KITCHEN_ID?: true
    DELIVERER_ID?: true
    TOTAL_AMOUNT?: true
  }

  export type OrdersMinAggregateInputType = {
    ORDER_ID?: true
    CUSTOMER_ID?: true
    KITCHEN_ID?: true
    DELIVERER_ID?: true
    ORDER_DATE?: true
    STATUS?: true
    TOTAL_AMOUNT?: true
  }

  export type OrdersMaxAggregateInputType = {
    ORDER_ID?: true
    CUSTOMER_ID?: true
    KITCHEN_ID?: true
    DELIVERER_ID?: true
    ORDER_DATE?: true
    STATUS?: true
    TOTAL_AMOUNT?: true
  }

  export type OrdersCountAggregateInputType = {
    ORDER_ID?: true
    CUSTOMER_ID?: true
    KITCHEN_ID?: true
    DELIVERER_ID?: true
    ORDER_DATE?: true
    STATUS?: true
    TOTAL_AMOUNT?: true
    _all?: true
  }

  export type OrdersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to aggregate.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned orders
    **/
    _count?: true | OrdersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OrdersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OrdersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrdersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrdersMaxAggregateInputType
  }

  export type GetOrdersAggregateType<T extends OrdersAggregateArgs> = {
        [P in keyof T & keyof AggregateOrders]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrders[P]>
      : GetScalarType<T[P], AggregateOrders[P]>
  }




  export type ordersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ordersWhereInput
    orderBy?: ordersOrderByWithAggregationInput | ordersOrderByWithAggregationInput[]
    by: OrdersScalarFieldEnum[] | OrdersScalarFieldEnum
    having?: ordersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrdersCountAggregateInputType | true
    _avg?: OrdersAvgAggregateInputType
    _sum?: OrdersSumAggregateInputType
    _min?: OrdersMinAggregateInputType
    _max?: OrdersMaxAggregateInputType
  }

  export type OrdersGroupByOutputType = {
    ORDER_ID: number
    CUSTOMER_ID: number | null
    KITCHEN_ID: number | null
    DELIVERER_ID: number | null
    ORDER_DATE: Date | null
    STATUS: string | null
    TOTAL_AMOUNT: Decimal | null
    _count: OrdersCountAggregateOutputType | null
    _avg: OrdersAvgAggregateOutputType | null
    _sum: OrdersSumAggregateOutputType | null
    _min: OrdersMinAggregateOutputType | null
    _max: OrdersMaxAggregateOutputType | null
  }

  type GetOrdersGroupByPayload<T extends ordersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrdersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrdersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrdersGroupByOutputType[P]>
            : GetScalarType<T[P], OrdersGroupByOutputType[P]>
        }
      >
    >


  export type ordersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    ORDER_ID?: boolean
    CUSTOMER_ID?: boolean
    KITCHEN_ID?: boolean
    DELIVERER_ID?: boolean
    ORDER_DATE?: boolean
    STATUS?: boolean
    TOTAL_AMOUNT?: boolean
    customers?: boolean | orders$customersArgs<ExtArgs>
    kitchens?: boolean | orders$kitchensArgs<ExtArgs>
    deliverers?: boolean | orders$deliverersArgs<ExtArgs>
  }, ExtArgs["result"]["orders"]>


  export type ordersSelectScalar = {
    ORDER_ID?: boolean
    CUSTOMER_ID?: boolean
    KITCHEN_ID?: boolean
    DELIVERER_ID?: boolean
    ORDER_DATE?: boolean
    STATUS?: boolean
    TOTAL_AMOUNT?: boolean
  }

  export type ordersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customers?: boolean | orders$customersArgs<ExtArgs>
    kitchens?: boolean | orders$kitchensArgs<ExtArgs>
    deliverers?: boolean | orders$deliverersArgs<ExtArgs>
  }

  export type $ordersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "orders"
    objects: {
      customers: Prisma.$customersPayload<ExtArgs> | null
      kitchens: Prisma.$kitchensPayload<ExtArgs> | null
      deliverers: Prisma.$deliverersPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      ORDER_ID: number
      CUSTOMER_ID: number | null
      KITCHEN_ID: number | null
      DELIVERER_ID: number | null
      ORDER_DATE: Date | null
      STATUS: string | null
      TOTAL_AMOUNT: Prisma.Decimal | null
    }, ExtArgs["result"]["orders"]>
    composites: {}
  }

  type ordersGetPayload<S extends boolean | null | undefined | ordersDefaultArgs> = $Result.GetResult<Prisma.$ordersPayload, S>

  type ordersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ordersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OrdersCountAggregateInputType | true
    }

  export interface ordersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['orders'], meta: { name: 'orders' } }
    /**
     * Find zero or one Orders that matches the filter.
     * @param {ordersFindUniqueArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ordersFindUniqueArgs>(args: SelectSubset<T, ordersFindUniqueArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Orders that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ordersFindUniqueOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ordersFindUniqueOrThrowArgs>(args: SelectSubset<T, ordersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ordersFindFirstArgs>(args?: SelectSubset<T, ordersFindFirstArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Orders that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindFirstOrThrowArgs} args - Arguments to find a Orders
     * @example
     * // Get one Orders
     * const orders = await prisma.orders.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ordersFindFirstOrThrowArgs>(args?: SelectSubset<T, ordersFindFirstOrThrowArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Orders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Orders
     * const orders = await prisma.orders.findMany()
     * 
     * // Get first 10 Orders
     * const orders = await prisma.orders.findMany({ take: 10 })
     * 
     * // Only select the `ORDER_ID`
     * const ordersWithORDER_IDOnly = await prisma.orders.findMany({ select: { ORDER_ID: true } })
     * 
     */
    findMany<T extends ordersFindManyArgs>(args?: SelectSubset<T, ordersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Orders.
     * @param {ordersCreateArgs} args - Arguments to create a Orders.
     * @example
     * // Create one Orders
     * const Orders = await prisma.orders.create({
     *   data: {
     *     // ... data to create a Orders
     *   }
     * })
     * 
     */
    create<T extends ordersCreateArgs>(args: SelectSubset<T, ordersCreateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Orders.
     * @param {ordersCreateManyArgs} args - Arguments to create many Orders.
     * @example
     * // Create many Orders
     * const orders = await prisma.orders.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ordersCreateManyArgs>(args?: SelectSubset<T, ordersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Orders.
     * @param {ordersDeleteArgs} args - Arguments to delete one Orders.
     * @example
     * // Delete one Orders
     * const Orders = await prisma.orders.delete({
     *   where: {
     *     // ... filter to delete one Orders
     *   }
     * })
     * 
     */
    delete<T extends ordersDeleteArgs>(args: SelectSubset<T, ordersDeleteArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Orders.
     * @param {ordersUpdateArgs} args - Arguments to update one Orders.
     * @example
     * // Update one Orders
     * const orders = await prisma.orders.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ordersUpdateArgs>(args: SelectSubset<T, ordersUpdateArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Orders.
     * @param {ordersDeleteManyArgs} args - Arguments to filter Orders to delete.
     * @example
     * // Delete a few Orders
     * const { count } = await prisma.orders.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ordersDeleteManyArgs>(args?: SelectSubset<T, ordersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Orders
     * const orders = await prisma.orders.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ordersUpdateManyArgs>(args: SelectSubset<T, ordersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Orders.
     * @param {ordersUpsertArgs} args - Arguments to update or create a Orders.
     * @example
     * // Update or create a Orders
     * const orders = await prisma.orders.upsert({
     *   create: {
     *     // ... data to create a Orders
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Orders we want to update
     *   }
     * })
     */
    upsert<T extends ordersUpsertArgs>(args: SelectSubset<T, ordersUpsertArgs<ExtArgs>>): Prisma__ordersClient<$Result.GetResult<Prisma.$ordersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersCountArgs} args - Arguments to filter Orders to count.
     * @example
     * // Count the number of Orders
     * const count = await prisma.orders.count({
     *   where: {
     *     // ... the filter for the Orders we want to count
     *   }
     * })
    **/
    count<T extends ordersCountArgs>(
      args?: Subset<T, ordersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrdersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrdersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrdersAggregateArgs>(args: Subset<T, OrdersAggregateArgs>): Prisma.PrismaPromise<GetOrdersAggregateType<T>>

    /**
     * Group by Orders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ordersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ordersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ordersGroupByArgs['orderBy'] }
        : { orderBy?: ordersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ordersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrdersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the orders model
   */
  readonly fields: ordersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for orders.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ordersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customers<T extends orders$customersArgs<ExtArgs> = {}>(args?: Subset<T, orders$customersArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    kitchens<T extends orders$kitchensArgs<ExtArgs> = {}>(args?: Subset<T, orders$kitchensArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    deliverers<T extends orders$deliverersArgs<ExtArgs> = {}>(args?: Subset<T, orders$deliverersArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the orders model
   */ 
  interface ordersFieldRefs {
    readonly ORDER_ID: FieldRef<"orders", 'Int'>
    readonly CUSTOMER_ID: FieldRef<"orders", 'Int'>
    readonly KITCHEN_ID: FieldRef<"orders", 'Int'>
    readonly DELIVERER_ID: FieldRef<"orders", 'Int'>
    readonly ORDER_DATE: FieldRef<"orders", 'DateTime'>
    readonly STATUS: FieldRef<"orders", 'String'>
    readonly TOTAL_AMOUNT: FieldRef<"orders", 'Decimal'>
  }
    

  // Custom InputTypes
  /**
   * orders findUnique
   */
  export type ordersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findUniqueOrThrow
   */
  export type ordersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders findFirst
   */
  export type ordersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findFirstOrThrow
   */
  export type ordersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of orders.
     */
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders findMany
   */
  export type ordersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter, which orders to fetch.
     */
    where?: ordersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of orders to fetch.
     */
    orderBy?: ordersOrderByWithRelationInput | ordersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing orders.
     */
    cursor?: ordersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` orders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` orders.
     */
    skip?: number
    distinct?: OrdersScalarFieldEnum | OrdersScalarFieldEnum[]
  }

  /**
   * orders create
   */
  export type ordersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to create a orders.
     */
    data?: XOR<ordersCreateInput, ordersUncheckedCreateInput>
  }

  /**
   * orders createMany
   */
  export type ordersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many orders.
     */
    data: ordersCreateManyInput | ordersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * orders update
   */
  export type ordersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The data needed to update a orders.
     */
    data: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
    /**
     * Choose, which orders to update.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders updateMany
   */
  export type ordersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update orders.
     */
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyInput>
    /**
     * Filter which orders to update
     */
    where?: ordersWhereInput
  }

  /**
   * orders upsert
   */
  export type ordersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * The filter to search for the orders to update in case it exists.
     */
    where: ordersWhereUniqueInput
    /**
     * In case the orders found by the `where` argument doesn't exist, create a new orders with this data.
     */
    create: XOR<ordersCreateInput, ordersUncheckedCreateInput>
    /**
     * In case the orders was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ordersUpdateInput, ordersUncheckedUpdateInput>
  }

  /**
   * orders delete
   */
  export type ordersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
    /**
     * Filter which orders to delete.
     */
    where: ordersWhereUniqueInput
  }

  /**
   * orders deleteMany
   */
  export type ordersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which orders to delete
     */
    where?: ordersWhereInput
  }

  /**
   * orders.customers
   */
  export type orders$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    where?: customersWhereInput
  }

  /**
   * orders.kitchens
   */
  export type orders$kitchensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    where?: kitchensWhereInput
  }

  /**
   * orders.deliverers
   */
  export type orders$deliverersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    where?: deliverersWhereInput
  }

  /**
   * orders without action
   */
  export type ordersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the orders
     */
    select?: ordersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ordersInclude<ExtArgs> | null
  }


  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersAvgAggregateOutputType = {
    UID: number | null
  }

  export type UsersSumAggregateOutputType = {
    UID: number | null
  }

  export type UsersMinAggregateOutputType = {
    UID: number | null
    UNAME: string | null
    PWD: string | null
    EMAIL: string | null
    ADDR: string | null
    ROLE: string | null
    BANK_TOKEN: string | null
  }

  export type UsersMaxAggregateOutputType = {
    UID: number | null
    UNAME: string | null
    PWD: string | null
    EMAIL: string | null
    ADDR: string | null
    ROLE: string | null
    BANK_TOKEN: string | null
  }

  export type UsersCountAggregateOutputType = {
    UID: number
    UNAME: number
    PWD: number
    EMAIL: number
    ADDR: number
    ROLE: number
    BANK_TOKEN: number
    _all: number
  }


  export type UsersAvgAggregateInputType = {
    UID?: true
  }

  export type UsersSumAggregateInputType = {
    UID?: true
  }

  export type UsersMinAggregateInputType = {
    UID?: true
    UNAME?: true
    PWD?: true
    EMAIL?: true
    ADDR?: true
    ROLE?: true
    BANK_TOKEN?: true
  }

  export type UsersMaxAggregateInputType = {
    UID?: true
    UNAME?: true
    PWD?: true
    EMAIL?: true
    ADDR?: true
    ROLE?: true
    BANK_TOKEN?: true
  }

  export type UsersCountAggregateInputType = {
    UID?: true
    UNAME?: true
    PWD?: true
    EMAIL?: true
    ADDR?: true
    ROLE?: true
    BANK_TOKEN?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsersAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsersSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _avg?: UsersAvgAggregateInputType
    _sum?: UsersSumAggregateInputType
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    UID: number
    UNAME: string
    PWD: string
    EMAIL: string | null
    ADDR: string | null
    ROLE: string
    BANK_TOKEN: string | null
    _count: UsersCountAggregateOutputType | null
    _avg: UsersAvgAggregateOutputType | null
    _sum: UsersSumAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    UID?: boolean
    UNAME?: boolean
    PWD?: boolean
    EMAIL?: boolean
    ADDR?: boolean
    ROLE?: boolean
    BANK_TOKEN?: boolean
    customers?: boolean | users$customersArgs<ExtArgs>
    deliverers?: boolean | users$deliverersArgs<ExtArgs>
    kitchens?: boolean | users$kitchensArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>


  export type usersSelectScalar = {
    UID?: boolean
    UNAME?: boolean
    PWD?: boolean
    EMAIL?: boolean
    ADDR?: boolean
    ROLE?: boolean
    BANK_TOKEN?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customers?: boolean | users$customersArgs<ExtArgs>
    deliverers?: boolean | users$deliverersArgs<ExtArgs>
    kitchens?: boolean | users$kitchensArgs<ExtArgs>
  }

  export type $usersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      customers: Prisma.$customersPayload<ExtArgs> | null
      deliverers: Prisma.$deliverersPayload<ExtArgs> | null
      kitchens: Prisma.$kitchensPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      UID: number
      UNAME: string
      PWD: string
      EMAIL: string | null
      ADDR: string | null
      ROLE: string
      BANK_TOKEN: string | null
    }, ExtArgs["result"]["users"]>
    composites: {}
  }

  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usersFindUniqueArgs>(args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs>(args: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usersFindFirstArgs>(args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs>(args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `UID`
     * const usersWithUIDOnly = await prisma.users.findMany({ select: { UID: true } })
     * 
     */
    findMany<T extends usersFindManyArgs>(args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
     */
    create<T extends usersCreateArgs>(args: SelectSubset<T, usersCreateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {usersCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const users = await prisma.users.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usersCreateManyArgs>(args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
     */
    delete<T extends usersDeleteArgs>(args: SelectSubset<T, usersDeleteArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usersUpdateArgs>(args: SelectSubset<T, usersUpdateArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usersDeleteManyArgs>(args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usersUpdateManyArgs>(args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
     */
    upsert<T extends usersUpsertArgs>(args: SelectSubset<T, usersUpsertArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customers<T extends users$customersArgs<ExtArgs> = {}>(args?: Subset<T, users$customersArgs<ExtArgs>>): Prisma__customersClient<$Result.GetResult<Prisma.$customersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    deliverers<T extends users$deliverersArgs<ExtArgs> = {}>(args?: Subset<T, users$deliverersArgs<ExtArgs>>): Prisma__deliverersClient<$Result.GetResult<Prisma.$deliverersPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    kitchens<T extends users$kitchensArgs<ExtArgs> = {}>(args?: Subset<T, users$kitchensArgs<ExtArgs>>): Prisma__kitchensClient<$Result.GetResult<Prisma.$kitchensPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly UID: FieldRef<"users", 'Int'>
    readonly UNAME: FieldRef<"users", 'String'>
    readonly PWD: FieldRef<"users", 'String'>
    readonly EMAIL: FieldRef<"users", 'String'>
    readonly ADDR: FieldRef<"users", 'String'>
    readonly ROLE: FieldRef<"users", 'String'>
    readonly BANK_TOKEN: FieldRef<"users", 'String'>
  }
    

  // Custom InputTypes
  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }

  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }

  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }

  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }

  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }

  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }

  /**
   * users.customers
   */
  export type users$customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the customers
     */
    select?: customersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: customersInclude<ExtArgs> | null
    where?: customersWhereInput
  }

  /**
   * users.deliverers
   */
  export type users$deliverersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the deliverers
     */
    select?: deliverersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: deliverersInclude<ExtArgs> | null
    where?: deliverersWhereInput
  }

  /**
   * users.kitchens
   */
  export type users$kitchensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kitchens
     */
    select?: kitchensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kitchensInclude<ExtArgs> | null
    where?: kitchensWhereInput
  }

  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: usersInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CustomersScalarFieldEnum: {
    UID: 'UID',
    LOYALTY_POINTS: 'LOYALTY_POINTS',
    PREFERRED_PAYMENT_METHOD: 'PREFERRED_PAYMENT_METHOD',
    ORDER_HISTORY: 'ORDER_HISTORY',
    RATING: 'RATING'
  };

  export type CustomersScalarFieldEnum = (typeof CustomersScalarFieldEnum)[keyof typeof CustomersScalarFieldEnum]


  export const DeliverersScalarFieldEnum: {
    UID: 'UID',
    VEHICLE_TYPE: 'VEHICLE_TYPE',
    DELIVERY_COUNT: 'DELIVERY_COUNT',
    AVERAGE_RATING: 'AVERAGE_RATING',
    WORKING_REGION: 'WORKING_REGION',
    START_HOUR: 'START_HOUR',
    END_HOUR: 'END_HOUR'
  };

  export type DeliverersScalarFieldEnum = (typeof DeliverersScalarFieldEnum)[keyof typeof DeliverersScalarFieldEnum]


  export const KitchensScalarFieldEnum: {
    UID: 'UID',
    CUISINE_TYPE: 'CUISINE_TYPE',
    AVERAGE_PREPARATION_TIME: 'AVERAGE_PREPARATION_TIME',
    RATING: 'RATING',
    ACTIVE_STATUS: 'ACTIVE_STATUS',
    START_HOUR: 'START_HOUR',
    END_HOUR: 'END_HOUR'
  };

  export type KitchensScalarFieldEnum = (typeof KitchensScalarFieldEnum)[keyof typeof KitchensScalarFieldEnum]


  export const MenuScalarFieldEnum: {
    UID: 'UID',
    MENU_ID: 'MENU_ID',
    FOOD_NAME: 'FOOD_NAME',
    FOOD_ALLERGENS: 'FOOD_ALLERGENS',
    PRICE: 'PRICE'
  };

  export type MenuScalarFieldEnum = (typeof MenuScalarFieldEnum)[keyof typeof MenuScalarFieldEnum]


  export const OrdersScalarFieldEnum: {
    ORDER_ID: 'ORDER_ID',
    CUSTOMER_ID: 'CUSTOMER_ID',
    KITCHEN_ID: 'KITCHEN_ID',
    DELIVERER_ID: 'DELIVERER_ID',
    ORDER_DATE: 'ORDER_DATE',
    STATUS: 'STATUS',
    TOTAL_AMOUNT: 'TOTAL_AMOUNT'
  };

  export type OrdersScalarFieldEnum = (typeof OrdersScalarFieldEnum)[keyof typeof OrdersScalarFieldEnum]


  export const UsersScalarFieldEnum: {
    UID: 'UID',
    UNAME: 'UNAME',
    PWD: 'PWD',
    EMAIL: 'EMAIL',
    ADDR: 'ADDR',
    ROLE: 'ROLE',
    BANK_TOKEN: 'BANK_TOKEN'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Decimal'
   */
  export type DecimalFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Decimal'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type customersWhereInput = {
    AND?: customersWhereInput | customersWhereInput[]
    OR?: customersWhereInput[]
    NOT?: customersWhereInput | customersWhereInput[]
    UID?: IntFilter<"customers"> | number
    LOYALTY_POINTS?: IntNullableFilter<"customers"> | number | null
    PREFERRED_PAYMENT_METHOD?: StringNullableFilter<"customers"> | string | null
    ORDER_HISTORY?: IntNullableFilter<"customers"> | number | null
    RATING?: DecimalNullableFilter<"customers"> | Decimal | DecimalJsLike | number | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    orders?: OrdersListRelationFilter
  }

  export type customersOrderByWithRelationInput = {
    UID?: SortOrder
    LOYALTY_POINTS?: SortOrderInput | SortOrder
    PREFERRED_PAYMENT_METHOD?: SortOrderInput | SortOrder
    ORDER_HISTORY?: SortOrderInput | SortOrder
    RATING?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    orders?: ordersOrderByRelationAggregateInput
  }

  export type customersWhereUniqueInput = Prisma.AtLeast<{
    UID?: number
    AND?: customersWhereInput | customersWhereInput[]
    OR?: customersWhereInput[]
    NOT?: customersWhereInput | customersWhereInput[]
    LOYALTY_POINTS?: IntNullableFilter<"customers"> | number | null
    PREFERRED_PAYMENT_METHOD?: StringNullableFilter<"customers"> | string | null
    ORDER_HISTORY?: IntNullableFilter<"customers"> | number | null
    RATING?: DecimalNullableFilter<"customers"> | Decimal | DecimalJsLike | number | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    orders?: OrdersListRelationFilter
  }, "UID">

  export type customersOrderByWithAggregationInput = {
    UID?: SortOrder
    LOYALTY_POINTS?: SortOrderInput | SortOrder
    PREFERRED_PAYMENT_METHOD?: SortOrderInput | SortOrder
    ORDER_HISTORY?: SortOrderInput | SortOrder
    RATING?: SortOrderInput | SortOrder
    _count?: customersCountOrderByAggregateInput
    _avg?: customersAvgOrderByAggregateInput
    _max?: customersMaxOrderByAggregateInput
    _min?: customersMinOrderByAggregateInput
    _sum?: customersSumOrderByAggregateInput
  }

  export type customersScalarWhereWithAggregatesInput = {
    AND?: customersScalarWhereWithAggregatesInput | customersScalarWhereWithAggregatesInput[]
    OR?: customersScalarWhereWithAggregatesInput[]
    NOT?: customersScalarWhereWithAggregatesInput | customersScalarWhereWithAggregatesInput[]
    UID?: IntWithAggregatesFilter<"customers"> | number
    LOYALTY_POINTS?: IntNullableWithAggregatesFilter<"customers"> | number | null
    PREFERRED_PAYMENT_METHOD?: StringNullableWithAggregatesFilter<"customers"> | string | null
    ORDER_HISTORY?: IntNullableWithAggregatesFilter<"customers"> | number | null
    RATING?: DecimalNullableWithAggregatesFilter<"customers"> | Decimal | DecimalJsLike | number | string | null
  }

  export type deliverersWhereInput = {
    AND?: deliverersWhereInput | deliverersWhereInput[]
    OR?: deliverersWhereInput[]
    NOT?: deliverersWhereInput | deliverersWhereInput[]
    UID?: IntFilter<"deliverers"> | number
    VEHICLE_TYPE?: StringNullableFilter<"deliverers"> | string | null
    DELIVERY_COUNT?: IntNullableFilter<"deliverers"> | number | null
    AVERAGE_RATING?: DecimalNullableFilter<"deliverers"> | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: StringNullableFilter<"deliverers"> | string | null
    START_HOUR?: DateTimeNullableFilter<"deliverers"> | Date | string | null
    END_HOUR?: DateTimeNullableFilter<"deliverers"> | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    orders?: OrdersListRelationFilter
  }

  export type deliverersOrderByWithRelationInput = {
    UID?: SortOrder
    VEHICLE_TYPE?: SortOrderInput | SortOrder
    DELIVERY_COUNT?: SortOrderInput | SortOrder
    AVERAGE_RATING?: SortOrderInput | SortOrder
    WORKING_REGION?: SortOrderInput | SortOrder
    START_HOUR?: SortOrderInput | SortOrder
    END_HOUR?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    orders?: ordersOrderByRelationAggregateInput
  }

  export type deliverersWhereUniqueInput = Prisma.AtLeast<{
    UID?: number
    AND?: deliverersWhereInput | deliverersWhereInput[]
    OR?: deliverersWhereInput[]
    NOT?: deliverersWhereInput | deliverersWhereInput[]
    VEHICLE_TYPE?: StringNullableFilter<"deliverers"> | string | null
    DELIVERY_COUNT?: IntNullableFilter<"deliverers"> | number | null
    AVERAGE_RATING?: DecimalNullableFilter<"deliverers"> | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: StringNullableFilter<"deliverers"> | string | null
    START_HOUR?: DateTimeNullableFilter<"deliverers"> | Date | string | null
    END_HOUR?: DateTimeNullableFilter<"deliverers"> | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    orders?: OrdersListRelationFilter
  }, "UID">

  export type deliverersOrderByWithAggregationInput = {
    UID?: SortOrder
    VEHICLE_TYPE?: SortOrderInput | SortOrder
    DELIVERY_COUNT?: SortOrderInput | SortOrder
    AVERAGE_RATING?: SortOrderInput | SortOrder
    WORKING_REGION?: SortOrderInput | SortOrder
    START_HOUR?: SortOrderInput | SortOrder
    END_HOUR?: SortOrderInput | SortOrder
    _count?: deliverersCountOrderByAggregateInput
    _avg?: deliverersAvgOrderByAggregateInput
    _max?: deliverersMaxOrderByAggregateInput
    _min?: deliverersMinOrderByAggregateInput
    _sum?: deliverersSumOrderByAggregateInput
  }

  export type deliverersScalarWhereWithAggregatesInput = {
    AND?: deliverersScalarWhereWithAggregatesInput | deliverersScalarWhereWithAggregatesInput[]
    OR?: deliverersScalarWhereWithAggregatesInput[]
    NOT?: deliverersScalarWhereWithAggregatesInput | deliverersScalarWhereWithAggregatesInput[]
    UID?: IntWithAggregatesFilter<"deliverers"> | number
    VEHICLE_TYPE?: StringNullableWithAggregatesFilter<"deliverers"> | string | null
    DELIVERY_COUNT?: IntNullableWithAggregatesFilter<"deliverers"> | number | null
    AVERAGE_RATING?: DecimalNullableWithAggregatesFilter<"deliverers"> | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: StringNullableWithAggregatesFilter<"deliverers"> | string | null
    START_HOUR?: DateTimeNullableWithAggregatesFilter<"deliverers"> | Date | string | null
    END_HOUR?: DateTimeNullableWithAggregatesFilter<"deliverers"> | Date | string | null
  }

  export type kitchensWhereInput = {
    AND?: kitchensWhereInput | kitchensWhereInput[]
    OR?: kitchensWhereInput[]
    NOT?: kitchensWhereInput | kitchensWhereInput[]
    UID?: IntFilter<"kitchens"> | number
    CUISINE_TYPE?: StringNullableFilter<"kitchens"> | string | null
    AVERAGE_PREPARATION_TIME?: DateTimeNullableFilter<"kitchens"> | Date | string | null
    RATING?: DecimalNullableFilter<"kitchens"> | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: BoolNullableFilter<"kitchens"> | boolean | null
    START_HOUR?: DateTimeNullableFilter<"kitchens"> | Date | string | null
    END_HOUR?: DateTimeNullableFilter<"kitchens"> | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    menu?: MenuListRelationFilter
    orders?: OrdersListRelationFilter
  }

  export type kitchensOrderByWithRelationInput = {
    UID?: SortOrder
    CUISINE_TYPE?: SortOrderInput | SortOrder
    AVERAGE_PREPARATION_TIME?: SortOrderInput | SortOrder
    RATING?: SortOrderInput | SortOrder
    ACTIVE_STATUS?: SortOrderInput | SortOrder
    START_HOUR?: SortOrderInput | SortOrder
    END_HOUR?: SortOrderInput | SortOrder
    users?: usersOrderByWithRelationInput
    menu?: menuOrderByRelationAggregateInput
    orders?: ordersOrderByRelationAggregateInput
  }

  export type kitchensWhereUniqueInput = Prisma.AtLeast<{
    UID?: number
    AND?: kitchensWhereInput | kitchensWhereInput[]
    OR?: kitchensWhereInput[]
    NOT?: kitchensWhereInput | kitchensWhereInput[]
    CUISINE_TYPE?: StringNullableFilter<"kitchens"> | string | null
    AVERAGE_PREPARATION_TIME?: DateTimeNullableFilter<"kitchens"> | Date | string | null
    RATING?: DecimalNullableFilter<"kitchens"> | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: BoolNullableFilter<"kitchens"> | boolean | null
    START_HOUR?: DateTimeNullableFilter<"kitchens"> | Date | string | null
    END_HOUR?: DateTimeNullableFilter<"kitchens"> | Date | string | null
    users?: XOR<UsersRelationFilter, usersWhereInput>
    menu?: MenuListRelationFilter
    orders?: OrdersListRelationFilter
  }, "UID">

  export type kitchensOrderByWithAggregationInput = {
    UID?: SortOrder
    CUISINE_TYPE?: SortOrderInput | SortOrder
    AVERAGE_PREPARATION_TIME?: SortOrderInput | SortOrder
    RATING?: SortOrderInput | SortOrder
    ACTIVE_STATUS?: SortOrderInput | SortOrder
    START_HOUR?: SortOrderInput | SortOrder
    END_HOUR?: SortOrderInput | SortOrder
    _count?: kitchensCountOrderByAggregateInput
    _avg?: kitchensAvgOrderByAggregateInput
    _max?: kitchensMaxOrderByAggregateInput
    _min?: kitchensMinOrderByAggregateInput
    _sum?: kitchensSumOrderByAggregateInput
  }

  export type kitchensScalarWhereWithAggregatesInput = {
    AND?: kitchensScalarWhereWithAggregatesInput | kitchensScalarWhereWithAggregatesInput[]
    OR?: kitchensScalarWhereWithAggregatesInput[]
    NOT?: kitchensScalarWhereWithAggregatesInput | kitchensScalarWhereWithAggregatesInput[]
    UID?: IntWithAggregatesFilter<"kitchens"> | number
    CUISINE_TYPE?: StringNullableWithAggregatesFilter<"kitchens"> | string | null
    AVERAGE_PREPARATION_TIME?: DateTimeNullableWithAggregatesFilter<"kitchens"> | Date | string | null
    RATING?: DecimalNullableWithAggregatesFilter<"kitchens"> | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: BoolNullableWithAggregatesFilter<"kitchens"> | boolean | null
    START_HOUR?: DateTimeNullableWithAggregatesFilter<"kitchens"> | Date | string | null
    END_HOUR?: DateTimeNullableWithAggregatesFilter<"kitchens"> | Date | string | null
  }

  export type menuWhereInput = {
    AND?: menuWhereInput | menuWhereInput[]
    OR?: menuWhereInput[]
    NOT?: menuWhereInput | menuWhereInput[]
    UID?: IntFilter<"menu"> | number
    MENU_ID?: IntFilter<"menu"> | number
    FOOD_NAME?: StringNullableFilter<"menu"> | string | null
    FOOD_ALLERGENS?: StringNullableFilter<"menu"> | string | null
    PRICE?: DecimalNullableFilter<"menu"> | Decimal | DecimalJsLike | number | string | null
    kitchens?: XOR<KitchensRelationFilter, kitchensWhereInput>
  }

  export type menuOrderByWithRelationInput = {
    UID?: SortOrder
    MENU_ID?: SortOrder
    FOOD_NAME?: SortOrderInput | SortOrder
    FOOD_ALLERGENS?: SortOrderInput | SortOrder
    PRICE?: SortOrderInput | SortOrder
    kitchens?: kitchensOrderByWithRelationInput
  }

  export type menuWhereUniqueInput = Prisma.AtLeast<{
    UID_MENU_ID?: menuUIDMENU_IDCompoundUniqueInput
    AND?: menuWhereInput | menuWhereInput[]
    OR?: menuWhereInput[]
    NOT?: menuWhereInput | menuWhereInput[]
    UID?: IntFilter<"menu"> | number
    MENU_ID?: IntFilter<"menu"> | number
    FOOD_NAME?: StringNullableFilter<"menu"> | string | null
    FOOD_ALLERGENS?: StringNullableFilter<"menu"> | string | null
    PRICE?: DecimalNullableFilter<"menu"> | Decimal | DecimalJsLike | number | string | null
    kitchens?: XOR<KitchensRelationFilter, kitchensWhereInput>
  }, "UID_MENU_ID">

  export type menuOrderByWithAggregationInput = {
    UID?: SortOrder
    MENU_ID?: SortOrder
    FOOD_NAME?: SortOrderInput | SortOrder
    FOOD_ALLERGENS?: SortOrderInput | SortOrder
    PRICE?: SortOrderInput | SortOrder
    _count?: menuCountOrderByAggregateInput
    _avg?: menuAvgOrderByAggregateInput
    _max?: menuMaxOrderByAggregateInput
    _min?: menuMinOrderByAggregateInput
    _sum?: menuSumOrderByAggregateInput
  }

  export type menuScalarWhereWithAggregatesInput = {
    AND?: menuScalarWhereWithAggregatesInput | menuScalarWhereWithAggregatesInput[]
    OR?: menuScalarWhereWithAggregatesInput[]
    NOT?: menuScalarWhereWithAggregatesInput | menuScalarWhereWithAggregatesInput[]
    UID?: IntWithAggregatesFilter<"menu"> | number
    MENU_ID?: IntWithAggregatesFilter<"menu"> | number
    FOOD_NAME?: StringNullableWithAggregatesFilter<"menu"> | string | null
    FOOD_ALLERGENS?: StringNullableWithAggregatesFilter<"menu"> | string | null
    PRICE?: DecimalNullableWithAggregatesFilter<"menu"> | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersWhereInput = {
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    ORDER_ID?: IntFilter<"orders"> | number
    CUSTOMER_ID?: IntNullableFilter<"orders"> | number | null
    KITCHEN_ID?: IntNullableFilter<"orders"> | number | null
    DELIVERER_ID?: IntNullableFilter<"orders"> | number | null
    ORDER_DATE?: DateTimeNullableFilter<"orders"> | Date | string | null
    STATUS?: StringNullableFilter<"orders"> | string | null
    TOTAL_AMOUNT?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    customers?: XOR<CustomersNullableRelationFilter, customersWhereInput> | null
    kitchens?: XOR<KitchensNullableRelationFilter, kitchensWhereInput> | null
    deliverers?: XOR<DeliverersNullableRelationFilter, deliverersWhereInput> | null
  }

  export type ordersOrderByWithRelationInput = {
    ORDER_ID?: SortOrder
    CUSTOMER_ID?: SortOrderInput | SortOrder
    KITCHEN_ID?: SortOrderInput | SortOrder
    DELIVERER_ID?: SortOrderInput | SortOrder
    ORDER_DATE?: SortOrderInput | SortOrder
    STATUS?: SortOrderInput | SortOrder
    TOTAL_AMOUNT?: SortOrderInput | SortOrder
    customers?: customersOrderByWithRelationInput
    kitchens?: kitchensOrderByWithRelationInput
    deliverers?: deliverersOrderByWithRelationInput
  }

  export type ordersWhereUniqueInput = Prisma.AtLeast<{
    ORDER_ID?: number
    AND?: ordersWhereInput | ordersWhereInput[]
    OR?: ordersWhereInput[]
    NOT?: ordersWhereInput | ordersWhereInput[]
    CUSTOMER_ID?: IntNullableFilter<"orders"> | number | null
    KITCHEN_ID?: IntNullableFilter<"orders"> | number | null
    DELIVERER_ID?: IntNullableFilter<"orders"> | number | null
    ORDER_DATE?: DateTimeNullableFilter<"orders"> | Date | string | null
    STATUS?: StringNullableFilter<"orders"> | string | null
    TOTAL_AMOUNT?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
    customers?: XOR<CustomersNullableRelationFilter, customersWhereInput> | null
    kitchens?: XOR<KitchensNullableRelationFilter, kitchensWhereInput> | null
    deliverers?: XOR<DeliverersNullableRelationFilter, deliverersWhereInput> | null
  }, "ORDER_ID">

  export type ordersOrderByWithAggregationInput = {
    ORDER_ID?: SortOrder
    CUSTOMER_ID?: SortOrderInput | SortOrder
    KITCHEN_ID?: SortOrderInput | SortOrder
    DELIVERER_ID?: SortOrderInput | SortOrder
    ORDER_DATE?: SortOrderInput | SortOrder
    STATUS?: SortOrderInput | SortOrder
    TOTAL_AMOUNT?: SortOrderInput | SortOrder
    _count?: ordersCountOrderByAggregateInput
    _avg?: ordersAvgOrderByAggregateInput
    _max?: ordersMaxOrderByAggregateInput
    _min?: ordersMinOrderByAggregateInput
    _sum?: ordersSumOrderByAggregateInput
  }

  export type ordersScalarWhereWithAggregatesInput = {
    AND?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    OR?: ordersScalarWhereWithAggregatesInput[]
    NOT?: ordersScalarWhereWithAggregatesInput | ordersScalarWhereWithAggregatesInput[]
    ORDER_ID?: IntWithAggregatesFilter<"orders"> | number
    CUSTOMER_ID?: IntNullableWithAggregatesFilter<"orders"> | number | null
    KITCHEN_ID?: IntNullableWithAggregatesFilter<"orders"> | number | null
    DELIVERER_ID?: IntNullableWithAggregatesFilter<"orders"> | number | null
    ORDER_DATE?: DateTimeNullableWithAggregatesFilter<"orders"> | Date | string | null
    STATUS?: StringNullableWithAggregatesFilter<"orders"> | string | null
    TOTAL_AMOUNT?: DecimalNullableWithAggregatesFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
  }

  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    UID?: IntFilter<"users"> | number
    UNAME?: StringFilter<"users"> | string
    PWD?: StringFilter<"users"> | string
    EMAIL?: StringNullableFilter<"users"> | string | null
    ADDR?: StringNullableFilter<"users"> | string | null
    ROLE?: StringFilter<"users"> | string
    BANK_TOKEN?: StringNullableFilter<"users"> | string | null
    customers?: XOR<CustomersNullableRelationFilter, customersWhereInput> | null
    deliverers?: XOR<DeliverersNullableRelationFilter, deliverersWhereInput> | null
    kitchens?: XOR<KitchensNullableRelationFilter, kitchensWhereInput> | null
  }

  export type usersOrderByWithRelationInput = {
    UID?: SortOrder
    UNAME?: SortOrder
    PWD?: SortOrder
    EMAIL?: SortOrderInput | SortOrder
    ADDR?: SortOrderInput | SortOrder
    ROLE?: SortOrder
    BANK_TOKEN?: SortOrderInput | SortOrder
    customers?: customersOrderByWithRelationInput
    deliverers?: deliverersOrderByWithRelationInput
    kitchens?: kitchensOrderByWithRelationInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    UID?: number
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    UNAME?: StringFilter<"users"> | string
    PWD?: StringFilter<"users"> | string
    EMAIL?: StringNullableFilter<"users"> | string | null
    ADDR?: StringNullableFilter<"users"> | string | null
    ROLE?: StringFilter<"users"> | string
    BANK_TOKEN?: StringNullableFilter<"users"> | string | null
    customers?: XOR<CustomersNullableRelationFilter, customersWhereInput> | null
    deliverers?: XOR<DeliverersNullableRelationFilter, deliverersWhereInput> | null
    kitchens?: XOR<KitchensNullableRelationFilter, kitchensWhereInput> | null
  }, "UID">

  export type usersOrderByWithAggregationInput = {
    UID?: SortOrder
    UNAME?: SortOrder
    PWD?: SortOrder
    EMAIL?: SortOrderInput | SortOrder
    ADDR?: SortOrderInput | SortOrder
    ROLE?: SortOrder
    BANK_TOKEN?: SortOrderInput | SortOrder
    _count?: usersCountOrderByAggregateInput
    _avg?: usersAvgOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
    _sum?: usersSumOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    UID?: IntWithAggregatesFilter<"users"> | number
    UNAME?: StringWithAggregatesFilter<"users"> | string
    PWD?: StringWithAggregatesFilter<"users"> | string
    EMAIL?: StringNullableWithAggregatesFilter<"users"> | string | null
    ADDR?: StringNullableWithAggregatesFilter<"users"> | string | null
    ROLE?: StringWithAggregatesFilter<"users"> | string
    BANK_TOKEN?: StringNullableWithAggregatesFilter<"users"> | string | null
  }

  export type customersCreateInput = {
    LOYALTY_POINTS?: number | null
    PREFERRED_PAYMENT_METHOD?: string | null
    ORDER_HISTORY?: number | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    users: usersCreateNestedOneWithoutCustomersInput
    orders?: ordersCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateInput = {
    UID: number
    LOYALTY_POINTS?: number | null
    PREFERRED_PAYMENT_METHOD?: string | null
    ORDER_HISTORY?: number | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutCustomersInput
  }

  export type customersUpdateInput = {
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    users?: usersUpdateOneRequiredWithoutCustomersNestedInput
    orders?: ordersUpdateManyWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateInput = {
    UID?: IntFieldUpdateOperationsInput | number
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedUpdateManyWithoutCustomersNestedInput
  }

  export type customersCreateManyInput = {
    UID: number
    LOYALTY_POINTS?: number | null
    PREFERRED_PAYMENT_METHOD?: string | null
    ORDER_HISTORY?: number | null
    RATING?: Decimal | DecimalJsLike | number | string | null
  }

  export type customersUpdateManyMutationInput = {
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type customersUncheckedUpdateManyInput = {
    UID?: IntFieldUpdateOperationsInput | number
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type deliverersCreateInput = {
    VEHICLE_TYPE?: string | null
    DELIVERY_COUNT?: number | null
    AVERAGE_RATING?: Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: string | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    users: usersCreateNestedOneWithoutDeliverersInput
    orders?: ordersCreateNestedManyWithoutDeliverersInput
  }

  export type deliverersUncheckedCreateInput = {
    UID: number
    VEHICLE_TYPE?: string | null
    DELIVERY_COUNT?: number | null
    AVERAGE_RATING?: Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: string | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutDeliverersInput
  }

  export type deliverersUpdateInput = {
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutDeliverersNestedInput
    orders?: ordersUpdateManyWithoutDeliverersNestedInput
  }

  export type deliverersUncheckedUpdateInput = {
    UID?: IntFieldUpdateOperationsInput | number
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutDeliverersNestedInput
  }

  export type deliverersCreateManyInput = {
    UID: number
    VEHICLE_TYPE?: string | null
    DELIVERY_COUNT?: number | null
    AVERAGE_RATING?: Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: string | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
  }

  export type deliverersUpdateManyMutationInput = {
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type deliverersUncheckedUpdateManyInput = {
    UID?: IntFieldUpdateOperationsInput | number
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type kitchensCreateInput = {
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    users: usersCreateNestedOneWithoutKitchensInput
    menu?: menuCreateNestedManyWithoutKitchensInput
    orders?: ordersCreateNestedManyWithoutKitchensInput
  }

  export type kitchensUncheckedCreateInput = {
    UID: number
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    menu?: menuUncheckedCreateNestedManyWithoutKitchensInput
    orders?: ordersUncheckedCreateNestedManyWithoutKitchensInput
  }

  export type kitchensUpdateInput = {
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutKitchensNestedInput
    menu?: menuUpdateManyWithoutKitchensNestedInput
    orders?: ordersUpdateManyWithoutKitchensNestedInput
  }

  export type kitchensUncheckedUpdateInput = {
    UID?: IntFieldUpdateOperationsInput | number
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    menu?: menuUncheckedUpdateManyWithoutKitchensNestedInput
    orders?: ordersUncheckedUpdateManyWithoutKitchensNestedInput
  }

  export type kitchensCreateManyInput = {
    UID: number
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
  }

  export type kitchensUpdateManyMutationInput = {
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type kitchensUncheckedUpdateManyInput = {
    UID?: IntFieldUpdateOperationsInput | number
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type menuCreateInput = {
    MENU_ID: number
    FOOD_NAME?: string | null
    FOOD_ALLERGENS?: string | null
    PRICE?: Decimal | DecimalJsLike | number | string | null
    kitchens: kitchensCreateNestedOneWithoutMenuInput
  }

  export type menuUncheckedCreateInput = {
    UID: number
    MENU_ID: number
    FOOD_NAME?: string | null
    FOOD_ALLERGENS?: string | null
    PRICE?: Decimal | DecimalJsLike | number | string | null
  }

  export type menuUpdateInput = {
    MENU_ID?: IntFieldUpdateOperationsInput | number
    FOOD_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FOOD_ALLERGENS?: NullableStringFieldUpdateOperationsInput | string | null
    PRICE?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    kitchens?: kitchensUpdateOneRequiredWithoutMenuNestedInput
  }

  export type menuUncheckedUpdateInput = {
    UID?: IntFieldUpdateOperationsInput | number
    MENU_ID?: IntFieldUpdateOperationsInput | number
    FOOD_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FOOD_ALLERGENS?: NullableStringFieldUpdateOperationsInput | string | null
    PRICE?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type menuCreateManyInput = {
    UID: number
    MENU_ID: number
    FOOD_NAME?: string | null
    FOOD_ALLERGENS?: string | null
    PRICE?: Decimal | DecimalJsLike | number | string | null
  }

  export type menuUpdateManyMutationInput = {
    MENU_ID?: IntFieldUpdateOperationsInput | number
    FOOD_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FOOD_ALLERGENS?: NullableStringFieldUpdateOperationsInput | string | null
    PRICE?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type menuUncheckedUpdateManyInput = {
    UID?: IntFieldUpdateOperationsInput | number
    MENU_ID?: IntFieldUpdateOperationsInput | number
    FOOD_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FOOD_ALLERGENS?: NullableStringFieldUpdateOperationsInput | string | null
    PRICE?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateInput = {
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
    customers?: customersCreateNestedOneWithoutOrdersInput
    kitchens?: kitchensCreateNestedOneWithoutOrdersInput
    deliverers?: deliverersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateInput = {
    ORDER_ID?: number
    CUSTOMER_ID?: number | null
    KITCHEN_ID?: number | null
    DELIVERER_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUpdateInput = {
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    customers?: customersUpdateOneWithoutOrdersNestedInput
    kitchens?: kitchensUpdateOneWithoutOrdersNestedInput
    deliverers?: deliverersUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    CUSTOMER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    KITCHEN_ID?: NullableIntFieldUpdateOperationsInput | number | null
    DELIVERER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateManyInput = {
    ORDER_ID?: number
    CUSTOMER_ID?: number | null
    KITCHEN_ID?: number | null
    DELIVERER_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUpdateManyMutationInput = {
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUncheckedUpdateManyInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    CUSTOMER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    KITCHEN_ID?: NullableIntFieldUpdateOperationsInput | number | null
    DELIVERER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type usersCreateInput = {
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    customers?: customersCreateNestedOneWithoutUsersInput
    deliverers?: deliverersCreateNestedOneWithoutUsersInput
    kitchens?: kitchensCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateInput = {
    UID?: number
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    customers?: customersUncheckedCreateNestedOneWithoutUsersInput
    deliverers?: deliverersUncheckedCreateNestedOneWithoutUsersInput
    kitchens?: kitchensUncheckedCreateNestedOneWithoutUsersInput
  }

  export type usersUpdateInput = {
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: customersUpdateOneWithoutUsersNestedInput
    deliverers?: deliverersUpdateOneWithoutUsersNestedInput
    kitchens?: kitchensUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateInput = {
    UID?: IntFieldUpdateOperationsInput | number
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: customersUncheckedUpdateOneWithoutUsersNestedInput
    deliverers?: deliverersUncheckedUpdateOneWithoutUsersNestedInput
    kitchens?: kitchensUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type usersCreateManyInput = {
    UID?: number
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
  }

  export type usersUpdateManyMutationInput = {
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type usersUncheckedUpdateManyInput = {
    UID?: IntFieldUpdateOperationsInput | number
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type OrdersListRelationFilter = {
    every?: ordersWhereInput
    some?: ordersWhereInput
    none?: ordersWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ordersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type customersCountOrderByAggregateInput = {
    UID?: SortOrder
    LOYALTY_POINTS?: SortOrder
    PREFERRED_PAYMENT_METHOD?: SortOrder
    ORDER_HISTORY?: SortOrder
    RATING?: SortOrder
  }

  export type customersAvgOrderByAggregateInput = {
    UID?: SortOrder
    LOYALTY_POINTS?: SortOrder
    ORDER_HISTORY?: SortOrder
    RATING?: SortOrder
  }

  export type customersMaxOrderByAggregateInput = {
    UID?: SortOrder
    LOYALTY_POINTS?: SortOrder
    PREFERRED_PAYMENT_METHOD?: SortOrder
    ORDER_HISTORY?: SortOrder
    RATING?: SortOrder
  }

  export type customersMinOrderByAggregateInput = {
    UID?: SortOrder
    LOYALTY_POINTS?: SortOrder
    PREFERRED_PAYMENT_METHOD?: SortOrder
    ORDER_HISTORY?: SortOrder
    RATING?: SortOrder
  }

  export type customersSumOrderByAggregateInput = {
    UID?: SortOrder
    LOYALTY_POINTS?: SortOrder
    ORDER_HISTORY?: SortOrder
    RATING?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type deliverersCountOrderByAggregateInput = {
    UID?: SortOrder
    VEHICLE_TYPE?: SortOrder
    DELIVERY_COUNT?: SortOrder
    AVERAGE_RATING?: SortOrder
    WORKING_REGION?: SortOrder
    START_HOUR?: SortOrder
    END_HOUR?: SortOrder
  }

  export type deliverersAvgOrderByAggregateInput = {
    UID?: SortOrder
    DELIVERY_COUNT?: SortOrder
    AVERAGE_RATING?: SortOrder
  }

  export type deliverersMaxOrderByAggregateInput = {
    UID?: SortOrder
    VEHICLE_TYPE?: SortOrder
    DELIVERY_COUNT?: SortOrder
    AVERAGE_RATING?: SortOrder
    WORKING_REGION?: SortOrder
    START_HOUR?: SortOrder
    END_HOUR?: SortOrder
  }

  export type deliverersMinOrderByAggregateInput = {
    UID?: SortOrder
    VEHICLE_TYPE?: SortOrder
    DELIVERY_COUNT?: SortOrder
    AVERAGE_RATING?: SortOrder
    WORKING_REGION?: SortOrder
    START_HOUR?: SortOrder
    END_HOUR?: SortOrder
  }

  export type deliverersSumOrderByAggregateInput = {
    UID?: SortOrder
    DELIVERY_COUNT?: SortOrder
    AVERAGE_RATING?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type BoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type MenuListRelationFilter = {
    every?: menuWhereInput
    some?: menuWhereInput
    none?: menuWhereInput
  }

  export type menuOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type kitchensCountOrderByAggregateInput = {
    UID?: SortOrder
    CUISINE_TYPE?: SortOrder
    AVERAGE_PREPARATION_TIME?: SortOrder
    RATING?: SortOrder
    ACTIVE_STATUS?: SortOrder
    START_HOUR?: SortOrder
    END_HOUR?: SortOrder
  }

  export type kitchensAvgOrderByAggregateInput = {
    UID?: SortOrder
    RATING?: SortOrder
  }

  export type kitchensMaxOrderByAggregateInput = {
    UID?: SortOrder
    CUISINE_TYPE?: SortOrder
    AVERAGE_PREPARATION_TIME?: SortOrder
    RATING?: SortOrder
    ACTIVE_STATUS?: SortOrder
    START_HOUR?: SortOrder
    END_HOUR?: SortOrder
  }

  export type kitchensMinOrderByAggregateInput = {
    UID?: SortOrder
    CUISINE_TYPE?: SortOrder
    AVERAGE_PREPARATION_TIME?: SortOrder
    RATING?: SortOrder
    ACTIVE_STATUS?: SortOrder
    START_HOUR?: SortOrder
    END_HOUR?: SortOrder
  }

  export type kitchensSumOrderByAggregateInput = {
    UID?: SortOrder
    RATING?: SortOrder
  }

  export type BoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type KitchensRelationFilter = {
    is?: kitchensWhereInput
    isNot?: kitchensWhereInput
  }

  export type menuUIDMENU_IDCompoundUniqueInput = {
    UID: number
    MENU_ID: number
  }

  export type menuCountOrderByAggregateInput = {
    UID?: SortOrder
    MENU_ID?: SortOrder
    FOOD_NAME?: SortOrder
    FOOD_ALLERGENS?: SortOrder
    PRICE?: SortOrder
  }

  export type menuAvgOrderByAggregateInput = {
    UID?: SortOrder
    MENU_ID?: SortOrder
    PRICE?: SortOrder
  }

  export type menuMaxOrderByAggregateInput = {
    UID?: SortOrder
    MENU_ID?: SortOrder
    FOOD_NAME?: SortOrder
    FOOD_ALLERGENS?: SortOrder
    PRICE?: SortOrder
  }

  export type menuMinOrderByAggregateInput = {
    UID?: SortOrder
    MENU_ID?: SortOrder
    FOOD_NAME?: SortOrder
    FOOD_ALLERGENS?: SortOrder
    PRICE?: SortOrder
  }

  export type menuSumOrderByAggregateInput = {
    UID?: SortOrder
    MENU_ID?: SortOrder
    PRICE?: SortOrder
  }

  export type CustomersNullableRelationFilter = {
    is?: customersWhereInput | null
    isNot?: customersWhereInput | null
  }

  export type KitchensNullableRelationFilter = {
    is?: kitchensWhereInput | null
    isNot?: kitchensWhereInput | null
  }

  export type DeliverersNullableRelationFilter = {
    is?: deliverersWhereInput | null
    isNot?: deliverersWhereInput | null
  }

  export type ordersCountOrderByAggregateInput = {
    ORDER_ID?: SortOrder
    CUSTOMER_ID?: SortOrder
    KITCHEN_ID?: SortOrder
    DELIVERER_ID?: SortOrder
    ORDER_DATE?: SortOrder
    STATUS?: SortOrder
    TOTAL_AMOUNT?: SortOrder
  }

  export type ordersAvgOrderByAggregateInput = {
    ORDER_ID?: SortOrder
    CUSTOMER_ID?: SortOrder
    KITCHEN_ID?: SortOrder
    DELIVERER_ID?: SortOrder
    TOTAL_AMOUNT?: SortOrder
  }

  export type ordersMaxOrderByAggregateInput = {
    ORDER_ID?: SortOrder
    CUSTOMER_ID?: SortOrder
    KITCHEN_ID?: SortOrder
    DELIVERER_ID?: SortOrder
    ORDER_DATE?: SortOrder
    STATUS?: SortOrder
    TOTAL_AMOUNT?: SortOrder
  }

  export type ordersMinOrderByAggregateInput = {
    ORDER_ID?: SortOrder
    CUSTOMER_ID?: SortOrder
    KITCHEN_ID?: SortOrder
    DELIVERER_ID?: SortOrder
    ORDER_DATE?: SortOrder
    STATUS?: SortOrder
    TOTAL_AMOUNT?: SortOrder
  }

  export type ordersSumOrderByAggregateInput = {
    ORDER_ID?: SortOrder
    CUSTOMER_ID?: SortOrder
    KITCHEN_ID?: SortOrder
    DELIVERER_ID?: SortOrder
    TOTAL_AMOUNT?: SortOrder
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type usersCountOrderByAggregateInput = {
    UID?: SortOrder
    UNAME?: SortOrder
    PWD?: SortOrder
    EMAIL?: SortOrder
    ADDR?: SortOrder
    ROLE?: SortOrder
    BANK_TOKEN?: SortOrder
  }

  export type usersAvgOrderByAggregateInput = {
    UID?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    UID?: SortOrder
    UNAME?: SortOrder
    PWD?: SortOrder
    EMAIL?: SortOrder
    ADDR?: SortOrder
    ROLE?: SortOrder
    BANK_TOKEN?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    UID?: SortOrder
    UNAME?: SortOrder
    PWD?: SortOrder
    EMAIL?: SortOrder
    ADDR?: SortOrder
    ROLE?: SortOrder
    BANK_TOKEN?: SortOrder
  }

  export type usersSumOrderByAggregateInput = {
    UID?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type usersCreateNestedOneWithoutCustomersInput = {
    create?: XOR<usersCreateWithoutCustomersInput, usersUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: usersCreateOrConnectWithoutCustomersInput
    connect?: usersWhereUniqueInput
  }

  export type ordersCreateNestedManyWithoutCustomersInput = {
    create?: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput> | ordersCreateWithoutCustomersInput[] | ordersUncheckedCreateWithoutCustomersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutCustomersInput | ordersCreateOrConnectWithoutCustomersInput[]
    createMany?: ordersCreateManyCustomersInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutCustomersInput = {
    create?: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput> | ordersCreateWithoutCustomersInput[] | ordersUncheckedCreateWithoutCustomersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutCustomersInput | ordersCreateOrConnectWithoutCustomersInput[]
    createMany?: ordersCreateManyCustomersInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableDecimalFieldUpdateOperationsInput = {
    set?: Decimal | DecimalJsLike | number | string | null
    increment?: Decimal | DecimalJsLike | number | string
    decrement?: Decimal | DecimalJsLike | number | string
    multiply?: Decimal | DecimalJsLike | number | string
    divide?: Decimal | DecimalJsLike | number | string
  }

  export type usersUpdateOneRequiredWithoutCustomersNestedInput = {
    create?: XOR<usersCreateWithoutCustomersInput, usersUncheckedCreateWithoutCustomersInput>
    connectOrCreate?: usersCreateOrConnectWithoutCustomersInput
    upsert?: usersUpsertWithoutCustomersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutCustomersInput, usersUpdateWithoutCustomersInput>, usersUncheckedUpdateWithoutCustomersInput>
  }

  export type ordersUpdateManyWithoutCustomersNestedInput = {
    create?: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput> | ordersCreateWithoutCustomersInput[] | ordersUncheckedCreateWithoutCustomersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutCustomersInput | ordersCreateOrConnectWithoutCustomersInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutCustomersInput | ordersUpsertWithWhereUniqueWithoutCustomersInput[]
    createMany?: ordersCreateManyCustomersInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutCustomersInput | ordersUpdateWithWhereUniqueWithoutCustomersInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutCustomersInput | ordersUpdateManyWithWhereWithoutCustomersInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ordersUncheckedUpdateManyWithoutCustomersNestedInput = {
    create?: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput> | ordersCreateWithoutCustomersInput[] | ordersUncheckedCreateWithoutCustomersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutCustomersInput | ordersCreateOrConnectWithoutCustomersInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutCustomersInput | ordersUpsertWithWhereUniqueWithoutCustomersInput[]
    createMany?: ordersCreateManyCustomersInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutCustomersInput | ordersUpdateWithWhereUniqueWithoutCustomersInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutCustomersInput | ordersUpdateManyWithWhereWithoutCustomersInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutDeliverersInput = {
    create?: XOR<usersCreateWithoutDeliverersInput, usersUncheckedCreateWithoutDeliverersInput>
    connectOrCreate?: usersCreateOrConnectWithoutDeliverersInput
    connect?: usersWhereUniqueInput
  }

  export type ordersCreateNestedManyWithoutDeliverersInput = {
    create?: XOR<ordersCreateWithoutDeliverersInput, ordersUncheckedCreateWithoutDeliverersInput> | ordersCreateWithoutDeliverersInput[] | ordersUncheckedCreateWithoutDeliverersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDeliverersInput | ordersCreateOrConnectWithoutDeliverersInput[]
    createMany?: ordersCreateManyDeliverersInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutDeliverersInput = {
    create?: XOR<ordersCreateWithoutDeliverersInput, ordersUncheckedCreateWithoutDeliverersInput> | ordersCreateWithoutDeliverersInput[] | ordersUncheckedCreateWithoutDeliverersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDeliverersInput | ordersCreateOrConnectWithoutDeliverersInput[]
    createMany?: ordersCreateManyDeliverersInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type usersUpdateOneRequiredWithoutDeliverersNestedInput = {
    create?: XOR<usersCreateWithoutDeliverersInput, usersUncheckedCreateWithoutDeliverersInput>
    connectOrCreate?: usersCreateOrConnectWithoutDeliverersInput
    upsert?: usersUpsertWithoutDeliverersInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutDeliverersInput, usersUpdateWithoutDeliverersInput>, usersUncheckedUpdateWithoutDeliverersInput>
  }

  export type ordersUpdateManyWithoutDeliverersNestedInput = {
    create?: XOR<ordersCreateWithoutDeliverersInput, ordersUncheckedCreateWithoutDeliverersInput> | ordersCreateWithoutDeliverersInput[] | ordersUncheckedCreateWithoutDeliverersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDeliverersInput | ordersCreateOrConnectWithoutDeliverersInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutDeliverersInput | ordersUpsertWithWhereUniqueWithoutDeliverersInput[]
    createMany?: ordersCreateManyDeliverersInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutDeliverersInput | ordersUpdateWithWhereUniqueWithoutDeliverersInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutDeliverersInput | ordersUpdateManyWithWhereWithoutDeliverersInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutDeliverersNestedInput = {
    create?: XOR<ordersCreateWithoutDeliverersInput, ordersUncheckedCreateWithoutDeliverersInput> | ordersCreateWithoutDeliverersInput[] | ordersUncheckedCreateWithoutDeliverersInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutDeliverersInput | ordersCreateOrConnectWithoutDeliverersInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutDeliverersInput | ordersUpsertWithWhereUniqueWithoutDeliverersInput[]
    createMany?: ordersCreateManyDeliverersInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutDeliverersInput | ordersUpdateWithWhereUniqueWithoutDeliverersInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutDeliverersInput | ordersUpdateManyWithWhereWithoutDeliverersInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type usersCreateNestedOneWithoutKitchensInput = {
    create?: XOR<usersCreateWithoutKitchensInput, usersUncheckedCreateWithoutKitchensInput>
    connectOrCreate?: usersCreateOrConnectWithoutKitchensInput
    connect?: usersWhereUniqueInput
  }

  export type menuCreateNestedManyWithoutKitchensInput = {
    create?: XOR<menuCreateWithoutKitchensInput, menuUncheckedCreateWithoutKitchensInput> | menuCreateWithoutKitchensInput[] | menuUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: menuCreateOrConnectWithoutKitchensInput | menuCreateOrConnectWithoutKitchensInput[]
    createMany?: menuCreateManyKitchensInputEnvelope
    connect?: menuWhereUniqueInput | menuWhereUniqueInput[]
  }

  export type ordersCreateNestedManyWithoutKitchensInput = {
    create?: XOR<ordersCreateWithoutKitchensInput, ordersUncheckedCreateWithoutKitchensInput> | ordersCreateWithoutKitchensInput[] | ordersUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutKitchensInput | ordersCreateOrConnectWithoutKitchensInput[]
    createMany?: ordersCreateManyKitchensInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type menuUncheckedCreateNestedManyWithoutKitchensInput = {
    create?: XOR<menuCreateWithoutKitchensInput, menuUncheckedCreateWithoutKitchensInput> | menuCreateWithoutKitchensInput[] | menuUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: menuCreateOrConnectWithoutKitchensInput | menuCreateOrConnectWithoutKitchensInput[]
    createMany?: menuCreateManyKitchensInputEnvelope
    connect?: menuWhereUniqueInput | menuWhereUniqueInput[]
  }

  export type ordersUncheckedCreateNestedManyWithoutKitchensInput = {
    create?: XOR<ordersCreateWithoutKitchensInput, ordersUncheckedCreateWithoutKitchensInput> | ordersCreateWithoutKitchensInput[] | ordersUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutKitchensInput | ordersCreateOrConnectWithoutKitchensInput[]
    createMany?: ordersCreateManyKitchensInputEnvelope
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
  }

  export type NullableBoolFieldUpdateOperationsInput = {
    set?: boolean | null
  }

  export type usersUpdateOneRequiredWithoutKitchensNestedInput = {
    create?: XOR<usersCreateWithoutKitchensInput, usersUncheckedCreateWithoutKitchensInput>
    connectOrCreate?: usersCreateOrConnectWithoutKitchensInput
    upsert?: usersUpsertWithoutKitchensInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutKitchensInput, usersUpdateWithoutKitchensInput>, usersUncheckedUpdateWithoutKitchensInput>
  }

  export type menuUpdateManyWithoutKitchensNestedInput = {
    create?: XOR<menuCreateWithoutKitchensInput, menuUncheckedCreateWithoutKitchensInput> | menuCreateWithoutKitchensInput[] | menuUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: menuCreateOrConnectWithoutKitchensInput | menuCreateOrConnectWithoutKitchensInput[]
    upsert?: menuUpsertWithWhereUniqueWithoutKitchensInput | menuUpsertWithWhereUniqueWithoutKitchensInput[]
    createMany?: menuCreateManyKitchensInputEnvelope
    set?: menuWhereUniqueInput | menuWhereUniqueInput[]
    disconnect?: menuWhereUniqueInput | menuWhereUniqueInput[]
    delete?: menuWhereUniqueInput | menuWhereUniqueInput[]
    connect?: menuWhereUniqueInput | menuWhereUniqueInput[]
    update?: menuUpdateWithWhereUniqueWithoutKitchensInput | menuUpdateWithWhereUniqueWithoutKitchensInput[]
    updateMany?: menuUpdateManyWithWhereWithoutKitchensInput | menuUpdateManyWithWhereWithoutKitchensInput[]
    deleteMany?: menuScalarWhereInput | menuScalarWhereInput[]
  }

  export type ordersUpdateManyWithoutKitchensNestedInput = {
    create?: XOR<ordersCreateWithoutKitchensInput, ordersUncheckedCreateWithoutKitchensInput> | ordersCreateWithoutKitchensInput[] | ordersUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutKitchensInput | ordersCreateOrConnectWithoutKitchensInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutKitchensInput | ordersUpsertWithWhereUniqueWithoutKitchensInput[]
    createMany?: ordersCreateManyKitchensInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutKitchensInput | ordersUpdateWithWhereUniqueWithoutKitchensInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutKitchensInput | ordersUpdateManyWithWhereWithoutKitchensInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type menuUncheckedUpdateManyWithoutKitchensNestedInput = {
    create?: XOR<menuCreateWithoutKitchensInput, menuUncheckedCreateWithoutKitchensInput> | menuCreateWithoutKitchensInput[] | menuUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: menuCreateOrConnectWithoutKitchensInput | menuCreateOrConnectWithoutKitchensInput[]
    upsert?: menuUpsertWithWhereUniqueWithoutKitchensInput | menuUpsertWithWhereUniqueWithoutKitchensInput[]
    createMany?: menuCreateManyKitchensInputEnvelope
    set?: menuWhereUniqueInput | menuWhereUniqueInput[]
    disconnect?: menuWhereUniqueInput | menuWhereUniqueInput[]
    delete?: menuWhereUniqueInput | menuWhereUniqueInput[]
    connect?: menuWhereUniqueInput | menuWhereUniqueInput[]
    update?: menuUpdateWithWhereUniqueWithoutKitchensInput | menuUpdateWithWhereUniqueWithoutKitchensInput[]
    updateMany?: menuUpdateManyWithWhereWithoutKitchensInput | menuUpdateManyWithWhereWithoutKitchensInput[]
    deleteMany?: menuScalarWhereInput | menuScalarWhereInput[]
  }

  export type ordersUncheckedUpdateManyWithoutKitchensNestedInput = {
    create?: XOR<ordersCreateWithoutKitchensInput, ordersUncheckedCreateWithoutKitchensInput> | ordersCreateWithoutKitchensInput[] | ordersUncheckedCreateWithoutKitchensInput[]
    connectOrCreate?: ordersCreateOrConnectWithoutKitchensInput | ordersCreateOrConnectWithoutKitchensInput[]
    upsert?: ordersUpsertWithWhereUniqueWithoutKitchensInput | ordersUpsertWithWhereUniqueWithoutKitchensInput[]
    createMany?: ordersCreateManyKitchensInputEnvelope
    set?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    disconnect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    delete?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    connect?: ordersWhereUniqueInput | ordersWhereUniqueInput[]
    update?: ordersUpdateWithWhereUniqueWithoutKitchensInput | ordersUpdateWithWhereUniqueWithoutKitchensInput[]
    updateMany?: ordersUpdateManyWithWhereWithoutKitchensInput | ordersUpdateManyWithWhereWithoutKitchensInput[]
    deleteMany?: ordersScalarWhereInput | ordersScalarWhereInput[]
  }

  export type kitchensCreateNestedOneWithoutMenuInput = {
    create?: XOR<kitchensCreateWithoutMenuInput, kitchensUncheckedCreateWithoutMenuInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutMenuInput
    connect?: kitchensWhereUniqueInput
  }

  export type kitchensUpdateOneRequiredWithoutMenuNestedInput = {
    create?: XOR<kitchensCreateWithoutMenuInput, kitchensUncheckedCreateWithoutMenuInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutMenuInput
    upsert?: kitchensUpsertWithoutMenuInput
    connect?: kitchensWhereUniqueInput
    update?: XOR<XOR<kitchensUpdateToOneWithWhereWithoutMenuInput, kitchensUpdateWithoutMenuInput>, kitchensUncheckedUpdateWithoutMenuInput>
  }

  export type customersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: customersCreateOrConnectWithoutOrdersInput
    connect?: customersWhereUniqueInput
  }

  export type kitchensCreateNestedOneWithoutOrdersInput = {
    create?: XOR<kitchensCreateWithoutOrdersInput, kitchensUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutOrdersInput
    connect?: kitchensWhereUniqueInput
  }

  export type deliverersCreateNestedOneWithoutOrdersInput = {
    create?: XOR<deliverersCreateWithoutOrdersInput, deliverersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: deliverersCreateOrConnectWithoutOrdersInput
    connect?: deliverersWhereUniqueInput
  }

  export type customersUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: customersCreateOrConnectWithoutOrdersInput
    upsert?: customersUpsertWithoutOrdersInput
    disconnect?: customersWhereInput | boolean
    delete?: customersWhereInput | boolean
    connect?: customersWhereUniqueInput
    update?: XOR<XOR<customersUpdateToOneWithWhereWithoutOrdersInput, customersUpdateWithoutOrdersInput>, customersUncheckedUpdateWithoutOrdersInput>
  }

  export type kitchensUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<kitchensCreateWithoutOrdersInput, kitchensUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutOrdersInput
    upsert?: kitchensUpsertWithoutOrdersInput
    disconnect?: kitchensWhereInput | boolean
    delete?: kitchensWhereInput | boolean
    connect?: kitchensWhereUniqueInput
    update?: XOR<XOR<kitchensUpdateToOneWithWhereWithoutOrdersInput, kitchensUpdateWithoutOrdersInput>, kitchensUncheckedUpdateWithoutOrdersInput>
  }

  export type deliverersUpdateOneWithoutOrdersNestedInput = {
    create?: XOR<deliverersCreateWithoutOrdersInput, deliverersUncheckedCreateWithoutOrdersInput>
    connectOrCreate?: deliverersCreateOrConnectWithoutOrdersInput
    upsert?: deliverersUpsertWithoutOrdersInput
    disconnect?: deliverersWhereInput | boolean
    delete?: deliverersWhereInput | boolean
    connect?: deliverersWhereUniqueInput
    update?: XOR<XOR<deliverersUpdateToOneWithWhereWithoutOrdersInput, deliverersUpdateWithoutOrdersInput>, deliverersUncheckedUpdateWithoutOrdersInput>
  }

  export type customersCreateNestedOneWithoutUsersInput = {
    create?: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: customersCreateOrConnectWithoutUsersInput
    connect?: customersWhereUniqueInput
  }

  export type deliverersCreateNestedOneWithoutUsersInput = {
    create?: XOR<deliverersCreateWithoutUsersInput, deliverersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: deliverersCreateOrConnectWithoutUsersInput
    connect?: deliverersWhereUniqueInput
  }

  export type kitchensCreateNestedOneWithoutUsersInput = {
    create?: XOR<kitchensCreateWithoutUsersInput, kitchensUncheckedCreateWithoutUsersInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutUsersInput
    connect?: kitchensWhereUniqueInput
  }

  export type customersUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: customersCreateOrConnectWithoutUsersInput
    connect?: customersWhereUniqueInput
  }

  export type deliverersUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<deliverersCreateWithoutUsersInput, deliverersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: deliverersCreateOrConnectWithoutUsersInput
    connect?: deliverersWhereUniqueInput
  }

  export type kitchensUncheckedCreateNestedOneWithoutUsersInput = {
    create?: XOR<kitchensCreateWithoutUsersInput, kitchensUncheckedCreateWithoutUsersInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutUsersInput
    connect?: kitchensWhereUniqueInput
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type customersUpdateOneWithoutUsersNestedInput = {
    create?: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: customersCreateOrConnectWithoutUsersInput
    upsert?: customersUpsertWithoutUsersInput
    disconnect?: customersWhereInput | boolean
    delete?: customersWhereInput | boolean
    connect?: customersWhereUniqueInput
    update?: XOR<XOR<customersUpdateToOneWithWhereWithoutUsersInput, customersUpdateWithoutUsersInput>, customersUncheckedUpdateWithoutUsersInput>
  }

  export type deliverersUpdateOneWithoutUsersNestedInput = {
    create?: XOR<deliverersCreateWithoutUsersInput, deliverersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: deliverersCreateOrConnectWithoutUsersInput
    upsert?: deliverersUpsertWithoutUsersInput
    disconnect?: deliverersWhereInput | boolean
    delete?: deliverersWhereInput | boolean
    connect?: deliverersWhereUniqueInput
    update?: XOR<XOR<deliverersUpdateToOneWithWhereWithoutUsersInput, deliverersUpdateWithoutUsersInput>, deliverersUncheckedUpdateWithoutUsersInput>
  }

  export type kitchensUpdateOneWithoutUsersNestedInput = {
    create?: XOR<kitchensCreateWithoutUsersInput, kitchensUncheckedCreateWithoutUsersInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutUsersInput
    upsert?: kitchensUpsertWithoutUsersInput
    disconnect?: kitchensWhereInput | boolean
    delete?: kitchensWhereInput | boolean
    connect?: kitchensWhereUniqueInput
    update?: XOR<XOR<kitchensUpdateToOneWithWhereWithoutUsersInput, kitchensUpdateWithoutUsersInput>, kitchensUncheckedUpdateWithoutUsersInput>
  }

  export type customersUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: customersCreateOrConnectWithoutUsersInput
    upsert?: customersUpsertWithoutUsersInput
    disconnect?: customersWhereInput | boolean
    delete?: customersWhereInput | boolean
    connect?: customersWhereUniqueInput
    update?: XOR<XOR<customersUpdateToOneWithWhereWithoutUsersInput, customersUpdateWithoutUsersInput>, customersUncheckedUpdateWithoutUsersInput>
  }

  export type deliverersUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<deliverersCreateWithoutUsersInput, deliverersUncheckedCreateWithoutUsersInput>
    connectOrCreate?: deliverersCreateOrConnectWithoutUsersInput
    upsert?: deliverersUpsertWithoutUsersInput
    disconnect?: deliverersWhereInput | boolean
    delete?: deliverersWhereInput | boolean
    connect?: deliverersWhereUniqueInput
    update?: XOR<XOR<deliverersUpdateToOneWithWhereWithoutUsersInput, deliverersUpdateWithoutUsersInput>, deliverersUncheckedUpdateWithoutUsersInput>
  }

  export type kitchensUncheckedUpdateOneWithoutUsersNestedInput = {
    create?: XOR<kitchensCreateWithoutUsersInput, kitchensUncheckedCreateWithoutUsersInput>
    connectOrCreate?: kitchensCreateOrConnectWithoutUsersInput
    upsert?: kitchensUpsertWithoutUsersInput
    disconnect?: kitchensWhereInput | boolean
    delete?: kitchensWhereInput | boolean
    connect?: kitchensWhereUniqueInput
    update?: XOR<XOR<kitchensUpdateToOneWithWhereWithoutUsersInput, kitchensUpdateWithoutUsersInput>, kitchensUncheckedUpdateWithoutUsersInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDecimalNullableFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedDecimalNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel> | null
    in?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    notIn?: Decimal[] | DecimalJsLike[] | number[] | string[] | null
    lt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    lte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gt?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    gte?: Decimal | DecimalJsLike | number | string | DecimalFieldRefInput<$PrismaModel>
    not?: NestedDecimalNullableWithAggregatesFilter<$PrismaModel> | Decimal | DecimalJsLike | number | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedDecimalNullableFilter<$PrismaModel>
    _sum?: NestedDecimalNullableFilter<$PrismaModel>
    _min?: NestedDecimalNullableFilter<$PrismaModel>
    _max?: NestedDecimalNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolNullableFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableFilter<$PrismaModel> | boolean | null
  }

  export type NestedBoolNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel> | null
    not?: NestedBoolNullableWithAggregatesFilter<$PrismaModel> | boolean | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedBoolNullableFilter<$PrismaModel>
    _max?: NestedBoolNullableFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type usersCreateWithoutCustomersInput = {
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    deliverers?: deliverersCreateNestedOneWithoutUsersInput
    kitchens?: kitchensCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutCustomersInput = {
    UID?: number
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    deliverers?: deliverersUncheckedCreateNestedOneWithoutUsersInput
    kitchens?: kitchensUncheckedCreateNestedOneWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutCustomersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutCustomersInput, usersUncheckedCreateWithoutCustomersInput>
  }

  export type ordersCreateWithoutCustomersInput = {
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
    kitchens?: kitchensCreateNestedOneWithoutOrdersInput
    deliverers?: deliverersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutCustomersInput = {
    ORDER_ID?: number
    KITCHEN_ID?: number | null
    DELIVERER_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateOrConnectWithoutCustomersInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput>
  }

  export type ordersCreateManyCustomersInputEnvelope = {
    data: ordersCreateManyCustomersInput | ordersCreateManyCustomersInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutCustomersInput = {
    update: XOR<usersUpdateWithoutCustomersInput, usersUncheckedUpdateWithoutCustomersInput>
    create: XOR<usersCreateWithoutCustomersInput, usersUncheckedCreateWithoutCustomersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutCustomersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutCustomersInput, usersUncheckedUpdateWithoutCustomersInput>
  }

  export type usersUpdateWithoutCustomersInput = {
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    deliverers?: deliverersUpdateOneWithoutUsersNestedInput
    kitchens?: kitchensUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutCustomersInput = {
    UID?: IntFieldUpdateOperationsInput | number
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    deliverers?: deliverersUncheckedUpdateOneWithoutUsersNestedInput
    kitchens?: kitchensUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type ordersUpsertWithWhereUniqueWithoutCustomersInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutCustomersInput, ordersUncheckedUpdateWithoutCustomersInput>
    create: XOR<ordersCreateWithoutCustomersInput, ordersUncheckedCreateWithoutCustomersInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutCustomersInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutCustomersInput, ordersUncheckedUpdateWithoutCustomersInput>
  }

  export type ordersUpdateManyWithWhereWithoutCustomersInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutCustomersInput>
  }

  export type ordersScalarWhereInput = {
    AND?: ordersScalarWhereInput | ordersScalarWhereInput[]
    OR?: ordersScalarWhereInput[]
    NOT?: ordersScalarWhereInput | ordersScalarWhereInput[]
    ORDER_ID?: IntFilter<"orders"> | number
    CUSTOMER_ID?: IntNullableFilter<"orders"> | number | null
    KITCHEN_ID?: IntNullableFilter<"orders"> | number | null
    DELIVERER_ID?: IntNullableFilter<"orders"> | number | null
    ORDER_DATE?: DateTimeNullableFilter<"orders"> | Date | string | null
    STATUS?: StringNullableFilter<"orders"> | string | null
    TOTAL_AMOUNT?: DecimalNullableFilter<"orders"> | Decimal | DecimalJsLike | number | string | null
  }

  export type usersCreateWithoutDeliverersInput = {
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    customers?: customersCreateNestedOneWithoutUsersInput
    kitchens?: kitchensCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutDeliverersInput = {
    UID?: number
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    customers?: customersUncheckedCreateNestedOneWithoutUsersInput
    kitchens?: kitchensUncheckedCreateNestedOneWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutDeliverersInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutDeliverersInput, usersUncheckedCreateWithoutDeliverersInput>
  }

  export type ordersCreateWithoutDeliverersInput = {
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
    customers?: customersCreateNestedOneWithoutOrdersInput
    kitchens?: kitchensCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutDeliverersInput = {
    ORDER_ID?: number
    CUSTOMER_ID?: number | null
    KITCHEN_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateOrConnectWithoutDeliverersInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutDeliverersInput, ordersUncheckedCreateWithoutDeliverersInput>
  }

  export type ordersCreateManyDeliverersInputEnvelope = {
    data: ordersCreateManyDeliverersInput | ordersCreateManyDeliverersInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutDeliverersInput = {
    update: XOR<usersUpdateWithoutDeliverersInput, usersUncheckedUpdateWithoutDeliverersInput>
    create: XOR<usersCreateWithoutDeliverersInput, usersUncheckedCreateWithoutDeliverersInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutDeliverersInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutDeliverersInput, usersUncheckedUpdateWithoutDeliverersInput>
  }

  export type usersUpdateWithoutDeliverersInput = {
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: customersUpdateOneWithoutUsersNestedInput
    kitchens?: kitchensUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutDeliverersInput = {
    UID?: IntFieldUpdateOperationsInput | number
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: customersUncheckedUpdateOneWithoutUsersNestedInput
    kitchens?: kitchensUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type ordersUpsertWithWhereUniqueWithoutDeliverersInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutDeliverersInput, ordersUncheckedUpdateWithoutDeliverersInput>
    create: XOR<ordersCreateWithoutDeliverersInput, ordersUncheckedCreateWithoutDeliverersInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutDeliverersInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutDeliverersInput, ordersUncheckedUpdateWithoutDeliverersInput>
  }

  export type ordersUpdateManyWithWhereWithoutDeliverersInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutDeliverersInput>
  }

  export type usersCreateWithoutKitchensInput = {
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    customers?: customersCreateNestedOneWithoutUsersInput
    deliverers?: deliverersCreateNestedOneWithoutUsersInput
  }

  export type usersUncheckedCreateWithoutKitchensInput = {
    UID?: number
    UNAME: string
    PWD: string
    EMAIL?: string | null
    ADDR?: string | null
    ROLE?: string
    BANK_TOKEN?: string | null
    customers?: customersUncheckedCreateNestedOneWithoutUsersInput
    deliverers?: deliverersUncheckedCreateNestedOneWithoutUsersInput
  }

  export type usersCreateOrConnectWithoutKitchensInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutKitchensInput, usersUncheckedCreateWithoutKitchensInput>
  }

  export type menuCreateWithoutKitchensInput = {
    MENU_ID: number
    FOOD_NAME?: string | null
    FOOD_ALLERGENS?: string | null
    PRICE?: Decimal | DecimalJsLike | number | string | null
  }

  export type menuUncheckedCreateWithoutKitchensInput = {
    MENU_ID: number
    FOOD_NAME?: string | null
    FOOD_ALLERGENS?: string | null
    PRICE?: Decimal | DecimalJsLike | number | string | null
  }

  export type menuCreateOrConnectWithoutKitchensInput = {
    where: menuWhereUniqueInput
    create: XOR<menuCreateWithoutKitchensInput, menuUncheckedCreateWithoutKitchensInput>
  }

  export type menuCreateManyKitchensInputEnvelope = {
    data: menuCreateManyKitchensInput | menuCreateManyKitchensInput[]
    skipDuplicates?: boolean
  }

  export type ordersCreateWithoutKitchensInput = {
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
    customers?: customersCreateNestedOneWithoutOrdersInput
    deliverers?: deliverersCreateNestedOneWithoutOrdersInput
  }

  export type ordersUncheckedCreateWithoutKitchensInput = {
    ORDER_ID?: number
    CUSTOMER_ID?: number | null
    DELIVERER_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateOrConnectWithoutKitchensInput = {
    where: ordersWhereUniqueInput
    create: XOR<ordersCreateWithoutKitchensInput, ordersUncheckedCreateWithoutKitchensInput>
  }

  export type ordersCreateManyKitchensInputEnvelope = {
    data: ordersCreateManyKitchensInput | ordersCreateManyKitchensInput[]
    skipDuplicates?: boolean
  }

  export type usersUpsertWithoutKitchensInput = {
    update: XOR<usersUpdateWithoutKitchensInput, usersUncheckedUpdateWithoutKitchensInput>
    create: XOR<usersCreateWithoutKitchensInput, usersUncheckedCreateWithoutKitchensInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutKitchensInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutKitchensInput, usersUncheckedUpdateWithoutKitchensInput>
  }

  export type usersUpdateWithoutKitchensInput = {
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: customersUpdateOneWithoutUsersNestedInput
    deliverers?: deliverersUpdateOneWithoutUsersNestedInput
  }

  export type usersUncheckedUpdateWithoutKitchensInput = {
    UID?: IntFieldUpdateOperationsInput | number
    UNAME?: StringFieldUpdateOperationsInput | string
    PWD?: StringFieldUpdateOperationsInput | string
    EMAIL?: NullableStringFieldUpdateOperationsInput | string | null
    ADDR?: NullableStringFieldUpdateOperationsInput | string | null
    ROLE?: StringFieldUpdateOperationsInput | string
    BANK_TOKEN?: NullableStringFieldUpdateOperationsInput | string | null
    customers?: customersUncheckedUpdateOneWithoutUsersNestedInput
    deliverers?: deliverersUncheckedUpdateOneWithoutUsersNestedInput
  }

  export type menuUpsertWithWhereUniqueWithoutKitchensInput = {
    where: menuWhereUniqueInput
    update: XOR<menuUpdateWithoutKitchensInput, menuUncheckedUpdateWithoutKitchensInput>
    create: XOR<menuCreateWithoutKitchensInput, menuUncheckedCreateWithoutKitchensInput>
  }

  export type menuUpdateWithWhereUniqueWithoutKitchensInput = {
    where: menuWhereUniqueInput
    data: XOR<menuUpdateWithoutKitchensInput, menuUncheckedUpdateWithoutKitchensInput>
  }

  export type menuUpdateManyWithWhereWithoutKitchensInput = {
    where: menuScalarWhereInput
    data: XOR<menuUpdateManyMutationInput, menuUncheckedUpdateManyWithoutKitchensInput>
  }

  export type menuScalarWhereInput = {
    AND?: menuScalarWhereInput | menuScalarWhereInput[]
    OR?: menuScalarWhereInput[]
    NOT?: menuScalarWhereInput | menuScalarWhereInput[]
    UID?: IntFilter<"menu"> | number
    MENU_ID?: IntFilter<"menu"> | number
    FOOD_NAME?: StringNullableFilter<"menu"> | string | null
    FOOD_ALLERGENS?: StringNullableFilter<"menu"> | string | null
    PRICE?: DecimalNullableFilter<"menu"> | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUpsertWithWhereUniqueWithoutKitchensInput = {
    where: ordersWhereUniqueInput
    update: XOR<ordersUpdateWithoutKitchensInput, ordersUncheckedUpdateWithoutKitchensInput>
    create: XOR<ordersCreateWithoutKitchensInput, ordersUncheckedCreateWithoutKitchensInput>
  }

  export type ordersUpdateWithWhereUniqueWithoutKitchensInput = {
    where: ordersWhereUniqueInput
    data: XOR<ordersUpdateWithoutKitchensInput, ordersUncheckedUpdateWithoutKitchensInput>
  }

  export type ordersUpdateManyWithWhereWithoutKitchensInput = {
    where: ordersScalarWhereInput
    data: XOR<ordersUpdateManyMutationInput, ordersUncheckedUpdateManyWithoutKitchensInput>
  }

  export type kitchensCreateWithoutMenuInput = {
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    users: usersCreateNestedOneWithoutKitchensInput
    orders?: ordersCreateNestedManyWithoutKitchensInput
  }

  export type kitchensUncheckedCreateWithoutMenuInput = {
    UID: number
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutKitchensInput
  }

  export type kitchensCreateOrConnectWithoutMenuInput = {
    where: kitchensWhereUniqueInput
    create: XOR<kitchensCreateWithoutMenuInput, kitchensUncheckedCreateWithoutMenuInput>
  }

  export type kitchensUpsertWithoutMenuInput = {
    update: XOR<kitchensUpdateWithoutMenuInput, kitchensUncheckedUpdateWithoutMenuInput>
    create: XOR<kitchensCreateWithoutMenuInput, kitchensUncheckedCreateWithoutMenuInput>
    where?: kitchensWhereInput
  }

  export type kitchensUpdateToOneWithWhereWithoutMenuInput = {
    where?: kitchensWhereInput
    data: XOR<kitchensUpdateWithoutMenuInput, kitchensUncheckedUpdateWithoutMenuInput>
  }

  export type kitchensUpdateWithoutMenuInput = {
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutKitchensNestedInput
    orders?: ordersUpdateManyWithoutKitchensNestedInput
  }

  export type kitchensUncheckedUpdateWithoutMenuInput = {
    UID?: IntFieldUpdateOperationsInput | number
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutKitchensNestedInput
  }

  export type customersCreateWithoutOrdersInput = {
    LOYALTY_POINTS?: number | null
    PREFERRED_PAYMENT_METHOD?: string | null
    ORDER_HISTORY?: number | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    users: usersCreateNestedOneWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutOrdersInput = {
    UID: number
    LOYALTY_POINTS?: number | null
    PREFERRED_PAYMENT_METHOD?: string | null
    ORDER_HISTORY?: number | null
    RATING?: Decimal | DecimalJsLike | number | string | null
  }

  export type customersCreateOrConnectWithoutOrdersInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
  }

  export type kitchensCreateWithoutOrdersInput = {
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    users: usersCreateNestedOneWithoutKitchensInput
    menu?: menuCreateNestedManyWithoutKitchensInput
  }

  export type kitchensUncheckedCreateWithoutOrdersInput = {
    UID: number
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    menu?: menuUncheckedCreateNestedManyWithoutKitchensInput
  }

  export type kitchensCreateOrConnectWithoutOrdersInput = {
    where: kitchensWhereUniqueInput
    create: XOR<kitchensCreateWithoutOrdersInput, kitchensUncheckedCreateWithoutOrdersInput>
  }

  export type deliverersCreateWithoutOrdersInput = {
    VEHICLE_TYPE?: string | null
    DELIVERY_COUNT?: number | null
    AVERAGE_RATING?: Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: string | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    users: usersCreateNestedOneWithoutDeliverersInput
  }

  export type deliverersUncheckedCreateWithoutOrdersInput = {
    UID: number
    VEHICLE_TYPE?: string | null
    DELIVERY_COUNT?: number | null
    AVERAGE_RATING?: Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: string | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
  }

  export type deliverersCreateOrConnectWithoutOrdersInput = {
    where: deliverersWhereUniqueInput
    create: XOR<deliverersCreateWithoutOrdersInput, deliverersUncheckedCreateWithoutOrdersInput>
  }

  export type customersUpsertWithoutOrdersInput = {
    update: XOR<customersUpdateWithoutOrdersInput, customersUncheckedUpdateWithoutOrdersInput>
    create: XOR<customersCreateWithoutOrdersInput, customersUncheckedCreateWithoutOrdersInput>
    where?: customersWhereInput
  }

  export type customersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: customersWhereInput
    data: XOR<customersUpdateWithoutOrdersInput, customersUncheckedUpdateWithoutOrdersInput>
  }

  export type customersUpdateWithoutOrdersInput = {
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    users?: usersUpdateOneRequiredWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateWithoutOrdersInput = {
    UID?: IntFieldUpdateOperationsInput | number
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type kitchensUpsertWithoutOrdersInput = {
    update: XOR<kitchensUpdateWithoutOrdersInput, kitchensUncheckedUpdateWithoutOrdersInput>
    create: XOR<kitchensCreateWithoutOrdersInput, kitchensUncheckedCreateWithoutOrdersInput>
    where?: kitchensWhereInput
  }

  export type kitchensUpdateToOneWithWhereWithoutOrdersInput = {
    where?: kitchensWhereInput
    data: XOR<kitchensUpdateWithoutOrdersInput, kitchensUncheckedUpdateWithoutOrdersInput>
  }

  export type kitchensUpdateWithoutOrdersInput = {
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutKitchensNestedInput
    menu?: menuUpdateManyWithoutKitchensNestedInput
  }

  export type kitchensUncheckedUpdateWithoutOrdersInput = {
    UID?: IntFieldUpdateOperationsInput | number
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    menu?: menuUncheckedUpdateManyWithoutKitchensNestedInput
  }

  export type deliverersUpsertWithoutOrdersInput = {
    update: XOR<deliverersUpdateWithoutOrdersInput, deliverersUncheckedUpdateWithoutOrdersInput>
    create: XOR<deliverersCreateWithoutOrdersInput, deliverersUncheckedCreateWithoutOrdersInput>
    where?: deliverersWhereInput
  }

  export type deliverersUpdateToOneWithWhereWithoutOrdersInput = {
    where?: deliverersWhereInput
    data: XOR<deliverersUpdateWithoutOrdersInput, deliverersUncheckedUpdateWithoutOrdersInput>
  }

  export type deliverersUpdateWithoutOrdersInput = {
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    users?: usersUpdateOneRequiredWithoutDeliverersNestedInput
  }

  export type deliverersUncheckedUpdateWithoutOrdersInput = {
    UID?: IntFieldUpdateOperationsInput | number
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type customersCreateWithoutUsersInput = {
    LOYALTY_POINTS?: number | null
    PREFERRED_PAYMENT_METHOD?: string | null
    ORDER_HISTORY?: number | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersCreateNestedManyWithoutCustomersInput
  }

  export type customersUncheckedCreateWithoutUsersInput = {
    LOYALTY_POINTS?: number | null
    PREFERRED_PAYMENT_METHOD?: string | null
    ORDER_HISTORY?: number | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutCustomersInput
  }

  export type customersCreateOrConnectWithoutUsersInput = {
    where: customersWhereUniqueInput
    create: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
  }

  export type deliverersCreateWithoutUsersInput = {
    VEHICLE_TYPE?: string | null
    DELIVERY_COUNT?: number | null
    AVERAGE_RATING?: Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: string | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    orders?: ordersCreateNestedManyWithoutDeliverersInput
  }

  export type deliverersUncheckedCreateWithoutUsersInput = {
    VEHICLE_TYPE?: string | null
    DELIVERY_COUNT?: number | null
    AVERAGE_RATING?: Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: string | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    orders?: ordersUncheckedCreateNestedManyWithoutDeliverersInput
  }

  export type deliverersCreateOrConnectWithoutUsersInput = {
    where: deliverersWhereUniqueInput
    create: XOR<deliverersCreateWithoutUsersInput, deliverersUncheckedCreateWithoutUsersInput>
  }

  export type kitchensCreateWithoutUsersInput = {
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    menu?: menuCreateNestedManyWithoutKitchensInput
    orders?: ordersCreateNestedManyWithoutKitchensInput
  }

  export type kitchensUncheckedCreateWithoutUsersInput = {
    CUISINE_TYPE?: string | null
    AVERAGE_PREPARATION_TIME?: Date | string | null
    RATING?: Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: boolean | null
    START_HOUR?: Date | string | null
    END_HOUR?: Date | string | null
    menu?: menuUncheckedCreateNestedManyWithoutKitchensInput
    orders?: ordersUncheckedCreateNestedManyWithoutKitchensInput
  }

  export type kitchensCreateOrConnectWithoutUsersInput = {
    where: kitchensWhereUniqueInput
    create: XOR<kitchensCreateWithoutUsersInput, kitchensUncheckedCreateWithoutUsersInput>
  }

  export type customersUpsertWithoutUsersInput = {
    update: XOR<customersUpdateWithoutUsersInput, customersUncheckedUpdateWithoutUsersInput>
    create: XOR<customersCreateWithoutUsersInput, customersUncheckedCreateWithoutUsersInput>
    where?: customersWhereInput
  }

  export type customersUpdateToOneWithWhereWithoutUsersInput = {
    where?: customersWhereInput
    data: XOR<customersUpdateWithoutUsersInput, customersUncheckedUpdateWithoutUsersInput>
  }

  export type customersUpdateWithoutUsersInput = {
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUpdateManyWithoutCustomersNestedInput
  }

  export type customersUncheckedUpdateWithoutUsersInput = {
    LOYALTY_POINTS?: NullableIntFieldUpdateOperationsInput | number | null
    PREFERRED_PAYMENT_METHOD?: NullableStringFieldUpdateOperationsInput | string | null
    ORDER_HISTORY?: NullableIntFieldUpdateOperationsInput | number | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    orders?: ordersUncheckedUpdateManyWithoutCustomersNestedInput
  }

  export type deliverersUpsertWithoutUsersInput = {
    update: XOR<deliverersUpdateWithoutUsersInput, deliverersUncheckedUpdateWithoutUsersInput>
    create: XOR<deliverersCreateWithoutUsersInput, deliverersUncheckedCreateWithoutUsersInput>
    where?: deliverersWhereInput
  }

  export type deliverersUpdateToOneWithWhereWithoutUsersInput = {
    where?: deliverersWhereInput
    data: XOR<deliverersUpdateWithoutUsersInput, deliverersUncheckedUpdateWithoutUsersInput>
  }

  export type deliverersUpdateWithoutUsersInput = {
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUpdateManyWithoutDeliverersNestedInput
  }

  export type deliverersUncheckedUpdateWithoutUsersInput = {
    VEHICLE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    DELIVERY_COUNT?: NullableIntFieldUpdateOperationsInput | number | null
    AVERAGE_RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    WORKING_REGION?: NullableStringFieldUpdateOperationsInput | string | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    orders?: ordersUncheckedUpdateManyWithoutDeliverersNestedInput
  }

  export type kitchensUpsertWithoutUsersInput = {
    update: XOR<kitchensUpdateWithoutUsersInput, kitchensUncheckedUpdateWithoutUsersInput>
    create: XOR<kitchensCreateWithoutUsersInput, kitchensUncheckedCreateWithoutUsersInput>
    where?: kitchensWhereInput
  }

  export type kitchensUpdateToOneWithWhereWithoutUsersInput = {
    where?: kitchensWhereInput
    data: XOR<kitchensUpdateWithoutUsersInput, kitchensUncheckedUpdateWithoutUsersInput>
  }

  export type kitchensUpdateWithoutUsersInput = {
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    menu?: menuUpdateManyWithoutKitchensNestedInput
    orders?: ordersUpdateManyWithoutKitchensNestedInput
  }

  export type kitchensUncheckedUpdateWithoutUsersInput = {
    CUISINE_TYPE?: NullableStringFieldUpdateOperationsInput | string | null
    AVERAGE_PREPARATION_TIME?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    RATING?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    ACTIVE_STATUS?: NullableBoolFieldUpdateOperationsInput | boolean | null
    START_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    END_HOUR?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    menu?: menuUncheckedUpdateManyWithoutKitchensNestedInput
    orders?: ordersUncheckedUpdateManyWithoutKitchensNestedInput
  }

  export type ordersCreateManyCustomersInput = {
    ORDER_ID?: number
    KITCHEN_ID?: number | null
    DELIVERER_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUpdateWithoutCustomersInput = {
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    kitchens?: kitchensUpdateOneWithoutOrdersNestedInput
    deliverers?: deliverersUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutCustomersInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    KITCHEN_ID?: NullableIntFieldUpdateOperationsInput | number | null
    DELIVERER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUncheckedUpdateManyWithoutCustomersInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    KITCHEN_ID?: NullableIntFieldUpdateOperationsInput | number | null
    DELIVERER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateManyDeliverersInput = {
    ORDER_ID?: number
    CUSTOMER_ID?: number | null
    KITCHEN_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUpdateWithoutDeliverersInput = {
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    customers?: customersUpdateOneWithoutOrdersNestedInput
    kitchens?: kitchensUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutDeliverersInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    CUSTOMER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    KITCHEN_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUncheckedUpdateManyWithoutDeliverersInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    CUSTOMER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    KITCHEN_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type menuCreateManyKitchensInput = {
    MENU_ID: number
    FOOD_NAME?: string | null
    FOOD_ALLERGENS?: string | null
    PRICE?: Decimal | DecimalJsLike | number | string | null
  }

  export type ordersCreateManyKitchensInput = {
    ORDER_ID?: number
    CUSTOMER_ID?: number | null
    DELIVERER_ID?: number | null
    ORDER_DATE?: Date | string | null
    STATUS?: string | null
    TOTAL_AMOUNT?: Decimal | DecimalJsLike | number | string | null
  }

  export type menuUpdateWithoutKitchensInput = {
    MENU_ID?: IntFieldUpdateOperationsInput | number
    FOOD_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FOOD_ALLERGENS?: NullableStringFieldUpdateOperationsInput | string | null
    PRICE?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type menuUncheckedUpdateWithoutKitchensInput = {
    MENU_ID?: IntFieldUpdateOperationsInput | number
    FOOD_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FOOD_ALLERGENS?: NullableStringFieldUpdateOperationsInput | string | null
    PRICE?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type menuUncheckedUpdateManyWithoutKitchensInput = {
    MENU_ID?: IntFieldUpdateOperationsInput | number
    FOOD_NAME?: NullableStringFieldUpdateOperationsInput | string | null
    FOOD_ALLERGENS?: NullableStringFieldUpdateOperationsInput | string | null
    PRICE?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUpdateWithoutKitchensInput = {
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
    customers?: customersUpdateOneWithoutOrdersNestedInput
    deliverers?: deliverersUpdateOneWithoutOrdersNestedInput
  }

  export type ordersUncheckedUpdateWithoutKitchensInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    CUSTOMER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    DELIVERER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }

  export type ordersUncheckedUpdateManyWithoutKitchensInput = {
    ORDER_ID?: IntFieldUpdateOperationsInput | number
    CUSTOMER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    DELIVERER_ID?: NullableIntFieldUpdateOperationsInput | number | null
    ORDER_DATE?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    STATUS?: NullableStringFieldUpdateOperationsInput | string | null
    TOTAL_AMOUNT?: NullableDecimalFieldUpdateOperationsInput | Decimal | DecimalJsLike | number | string | null
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use CustomersCountOutputTypeDefaultArgs instead
     */
    export type CustomersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CustomersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use DeliverersCountOutputTypeDefaultArgs instead
     */
    export type DeliverersCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = DeliverersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use KitchensCountOutputTypeDefaultArgs instead
     */
    export type KitchensCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = KitchensCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use customersDefaultArgs instead
     */
    export type customersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = customersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use deliverersDefaultArgs instead
     */
    export type deliverersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = deliverersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use kitchensDefaultArgs instead
     */
    export type kitchensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = kitchensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use menuDefaultArgs instead
     */
    export type menuArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = menuDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ordersDefaultArgs instead
     */
    export type ordersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ordersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}